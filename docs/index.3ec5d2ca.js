var e={};!function(e){function n(e,n,r){return r.a=e,r.f=n,r}function r(e){return n(2,e,(function(n){return function(r){return e(n,r)}}))}function t(e){return n(3,e,(function(n){return function(r){return function(t){return e(n,r,t)}}}))}function o(e){return n(4,e,(function(n){return function(r){return function(t){return function(o){return e(n,r,t,o)}}}}))}function a(e){return n(5,e,(function(n){return function(r){return function(t){return function(o){return function(a){return e(n,r,t,o,a)}}}}}))}function i(e){return n(6,e,(function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return e(n,r,t,o,a,i)}}}}}}))}function c(e){return n(8,e,(function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return e(n,r,t,o,a,i,c,l)}}}}}}}}))}function l(e,n,r){return 2===e.a?e.f(n,r):e(n)(r)}function u(e,n,r,t){return 3===e.a?e.f(n,r,t):e(n)(r)(t)}function f(e,n,r,t,o){return 4===e.a?e.f(n,r,t,o):e(n)(r)(t)(o)}function s(e,n,r,t,o,a){return 5===e.a?e.f(n,r,t,o,a):e(n)(r)(t)(o)(a)}function d(e,n,r,t,o,a,i){return 6===e.a?e.f(n,r,t,o,a,i):e(n)(r)(t)(o)(a)(i)}function m(e,n,r,t,o,a,i,c,l){return 8===e.a?e.f(n,r,t,o,a,i,c,l):e(n)(r)(t)(o)(a)(i)(c)(l)}var v=t((function(e,n,r){for(var t=Array(e),o=0;e>o;o++)t[o]=r(n+o);return t})),p=r((function(e,n){for(var r=Array(e),t=0;e>t&&n.b;t++)r[t]=n.a,n=n.b;return r.length=t,M(r,n)})),g=r((function(e,n){return n[e]}));function b(e){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+e+".md")}function h(e,n){for(var r,t=[],o=C(e,n,0,t);o&&(r=t.pop());o=C(r.a,r.b,0,t));return o}function C(e,n,r,t){if(e===n)return!0;if("object"!=typeof e||null===e||null===n)return"function"==typeof e&&b(5),!1;if(r>100)return t.push(M(e,n)),!0;for(var o in 0>e.$&&(e=Xn(e),n=Xn(n)),e)if(!C(e[o],n[o],r+1,t))return!1;return!0}function x(e,n,r){if("object"!=typeof e)return e===n?0:n>e?-1:1;if(void 0===e.$)return(r=x(e.a,n.a))||(r=x(e.b,n.b))?r:x(e.c,n.c);for(;e.b&&n.b&&!(r=x(e.a,n.a));e=e.b,n=n.b);return r||(e.b?1:n.b?-1:0)}var T=r((function(e,n){var r=x(e,n);return 0>r?Qn:r?Jn:Kn}));function M(e,n){return{a:e,b:n}}function P(e,n,r){return{a:e,b:n,c:r}}function y(e,n){if("string"==typeof e)return e+n;if(!e.b)return n;var r=w(e.a,n);e=e.b;for(var t=r;e.b;e=e.b)t=t.b=w(e.a,n);return r}var L={$:0};function w(e,n){return{$:1,a:e,b:n}}var D=r(w);function N(e){for(var n=L,r=e.length;r--;)n=w(e[r],n);return n}var S=t((function(e,n,r){for(var t=[];n.b&&r.b;n=n.b,r=r.b)t.push(l(e,n.a,r.a));return N(t)})),_=r((function(e,n){return e+n})),z=r(Math.pow),$=Math.cos,A=Math.sin,R=Math.tan,F=Math.ceil,B=Math.floor,k=Math.round,E=Math.sqrt,V=Math.log,j=r((function(e,n){return n.join(e)}));function H(e){return e+""}function I(e){return{$:2,b:e}}var W=I((function(e){return"number"!=typeof e?Q("an INT",e):e>-2147483647&&2147483647>e&&(0|e)===e?ir(e):!isFinite(e)||e%1?Q("an INT",e):ir(e)}));I((function(e){return"boolean"==typeof e?ir(e):Q("a BOOL",e)})),I((function(e){return"number"==typeof e?ir(e):Q("a FLOAT",e)})),I((function(e){return ir(e)})),I((function(e){return"string"==typeof e?ir(e):e instanceof String?ir(e+""):Q("a STRING",e)}));var O=r((function(e,n){return{$:6,d:e,b:n}}));function U(e,n){return{$:9,f:e,g:n}}var Y=r((function(e,n){return U(e,[n])})),q=t((function(e,n,r){return U(e,[n,r])})),G=r((function(e,n){return Z(e,n)}));function Z(e,n){switch(e.$){case 2:return e.b(n);case 5:return null===n?ir(e.c):Q("null",n);case 3:return K(n)?X(e.b,n,N):Q("a LIST",n);case 4:return K(n)?X(e.b,n,J):Q("an ARRAY",n);case 6:var r=e.d;if("object"!=typeof n||null===n||!(r in n))return Q("an OBJECT with a field named `"+r+"`",n);var t=Z(e.b,n[r]);return Er(t)?t:rr(l(or,r,t.a));case 7:var o=e.e;return K(n)?n.length>o?(t=Z(e.b,n[o]),Er(t)?t:rr(l(ar,o,t.a))):Q("a LONGER array. Need index "+o+" but only see "+n.length+" entries",n):Q("an ARRAY",n);case 8:if("object"!=typeof n||null===n||K(n))return Q("an OBJECT",n);var a=L;for(var i in n)if(n.hasOwnProperty(i)){if(t=Z(e.b,n[i]),!Er(t))return rr(l(or,i,t.a));a=w(M(i,t.a),a)}return ir(Cr(a));case 9:for(var c=e.f,u=e.g,f=0;u.length>f;f++){if(t=Z(u[f],n),!Er(t))return t;c=c(t.a)}return ir(c);case 10:return t=Z(e.b,n),Er(t)?Z(e.h(t.a),n):t;case 11:for(var s=L,d=e.g;d.b;d=d.b){if(t=Z(d.a,n),Er(t))return t;s=w(t.a,s)}return rr(cr(Cr(s)));case 1:return rr(l(tr,e.a,n));case 0:return ir(e.a)}}function X(e,n,r){for(var t=n.length,o=Array(t),a=0;t>a;a++){var i=Z(e,n[a]);if(!Er(i))return rr(l(ar,a,i.a));o[a]=i.a}return ir(r(o))}function K(e){return Array.isArray(e)||"undefined"!=typeof FileList&&e instanceof FileList}function J(e){return l(kr,e.length,(function(n){return e[n]}))}function Q(e,n){return rr(l(tr,"Expecting "+e,n))}function ee(e,n){if(e===n)return!0;if(e.$!==n.$)return!1;switch(e.$){case 0:case 1:return e.a===n.a;case 2:return e.b===n.b;case 5:return e.c===n.c;case 3:case 4:case 8:return ee(e.b,n.b);case 6:return e.d===n.d&&ee(e.b,n.b);case 7:return e.e===n.e&&ee(e.b,n.b);case 9:return e.f===n.f&&ne(e.g,n.g);case 10:return e.h===n.h&&ee(e.b,n.b);case 11:return ne(e.g,n.g)}}function ne(e,n){var r=e.length;if(r!==n.length)return!1;for(var t=0;r>t;t++)if(!ee(e[t],n[t]))return!1;return!0}function re(e){return{$:0,a:e}}function te(e){return{$:2,b:e,c:null}}var oe=r((function(e,n){return{$:3,b:e,d:n}})),ae=0;function ie(e){var n={$:0,e:ae++,f:e,g:null,h:[]};return de(n),n}function ce(e){return te((function(n){n(re(ie(e)))}))}function le(e,n){e.h.push(n),de(e)}var ue=r((function(e,n){return te((function(r){le(e,n),r(re(0))}))})),fe=!1,se=[];function de(e){if(se.push(e),!fe){for(fe=!0;e=se.shift();)me(e);fe=!1}}function me(e){for(;e.f;){var n=e.f.$;if(0===n||1===n){for(;e.g&&e.g.$!==n;)e.g=e.g.i;if(!e.g)return;e.f=e.g.b(e.f.a),e.g=e.g.i}else{if(2===n)return void(e.f.c=e.f.b((function(n){e.f=n,de(e)})));if(5===n){if(0===e.h.length)return;e.f=e.f.b(e.h.shift())}else e.g={$:3===n?0:1,b:e.f.b,i:e.g},e.f=e.f.d}}}var ve={};function pe(e,n,r,t,o){return{b:e,c:n,d:r,e:t,f:o}}function ge(e,n){var r={g:n,h:void 0},t=e.c,o=e.d,a=e.e,i=e.f;return r.h=ie(l(oe,(function e(n){return l(oe,e,{$:5,b:function(e){var c=e.a;return 0===e.$?u(o,r,c,n):a&&i?f(t,r,c.i,c.j,n):u(t,r,a?c.i:c.j,n)}})}),e.b))}var be=r((function(e,n){return te((function(r){e.g(n),r(re(0))}))})),he=r((function(e,n){return l(ue,e.h,{$:0,a:n})}));function Ce(e){return function(n){return{$:1,k:e,l:n}}}function xe(e){return{$:2,m:e}}var Te=[],Me=!1;function Pe(e,n,r){if(Te.push({p:e,q:n,r:r}),!Me){Me=!0;for(var t;t=Te.shift();)ye(t.p,t.q,t.r);Me=!1}}function ye(e,n,r){var t={};for(var o in Le(!0,n,t,null),Le(!1,r,t,null),e)le(e[o],{$:"fx",a:t[o]||{i:L,j:L}})}function Le(e,n,r,t){switch(n.$){case 1:var o=n.k,a=(c=e,u=o,f=t,s=n.l,l(c?ve[u].e:ve[u].f,(function(e){for(var n=f;n;n=n.t)e=n.s(e);return e}),s));return void(r[o]=function(e,n,r){return r=r||{i:L,j:L},e?r.i=w(n,r.i):r.j=w(n,r.j),r}(e,a,r[o]));case 2:for(var i=n.m;i.b;i=i.b)Le(e,i.a,r,t);return;case 3:return void Le(e,n.o,r,{s:n.n,t:t})}var c,u,f,s}var we="undefined"!=typeof document?document:{};function De(e,n){e.appendChild(n)}function Ne(e){return{$:0,a:e}}var Se,_e=r((function(e,n){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b||0,o.push(i)}return a+=o.length,{$:1,c:n,d:Re(r),e:o,f:e,b:a}}))}))(void 0),ze=r((function(e,n){return r((function(r,t){for(var o=[],a=0;t.b;t=t.b){var i=t.a;a+=i.b.b||0,o.push(i)}return a+=o.length,{$:2,c:n,d:Re(r),e:o,f:e,b:a}}))}))(void 0),$e=r((function(e,n){return{$:"a1",n:e,o:n}})),Ae=r((function(e,n){return{$:"a3",n:e,o:n}}));function Re(e){for(var n={};e.b;e=e.b){var r=e.a,t=r.$,o=r.n,a=r.o;if("a2"!==t){var i=n[t]||(n[t]={});"a3"===t&&"class"===o?Fe(i,o,a):i[o]=a}else"className"===o?Fe(n,o,a):n[o]=a}return n}function Fe(e,n,r){var t=e[n];e[n]=t?t+" "+r:r}function Be(e,n){var r=e.$;if(5===r)return Be(e.k||(e.k=e.m()),n);if(0===r)return we.createTextNode(e.a);if(4===r){for(var t=e.k,o=e.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:n};return(i=Be(t,a)).elm_event_node_ref=a,i}if(3===r)return ke(i=e.h(e.g),n,e.d),i;var i=e.f?we.createElementNS(e.f,e.c):we.createElement(e.c);ke(i,n,e.d);for(var c=e.e,l=0;c.length>l;l++)De(i,Be(1===r?c[l]:c[l].b,n));return i}function ke(e,n,r){for(var t in r){var o=r[t];"a1"===t?Ee(e,o):"a0"===t?He(e,n,o):"a3"===t?Ve(e,o):"a4"===t?je(e,o):("value"!==t&&"checked"!==t||e[t]!==o)&&(e[t]=o)}}function Ee(e,n){var r=e.style;for(var t in n)r[t]=n[t]}function Ve(e,n){for(var r in n){var t=n[r];void 0!==t?e.setAttribute(r,t):e.removeAttribute(r)}}function je(e,n){for(var r in n){var t=n[r],o=t.f,a=t.o;void 0!==a?e.setAttributeNS(o,r,a):e.removeAttributeNS(o,r)}}function He(e,n,r){var t=e.elmFs||(e.elmFs={});for(var o in r){var a=r[o],i=t[o];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}e.removeEventListener(o,i)}i=Ie(n,a),e.addEventListener(o,i,Se&&{passive:2>Ir(a)}),t[o]=i}else e.removeEventListener(o,i),t[o]=void 0}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){Se=!0}}))}catch(e){}function Ie(e,n){function r(n){var t=r.q,o=Z(t.a,n);if(Er(o)){for(var a,i=Ir(t),c=o.a,l=i?3>i?c.a:c.as:c,u=1==i?c.b:3==i&&c.cP,f=(u&&n.stopPropagation(),(2==i?c.b:3==i&&c.cG)&&n.preventDefault(),e);a=f.j;){if("function"==typeof a)l=a(l);else for(var s=a.length;s--;)l=a[s](l);f=f.p}f(l,u)}}return r.q=n,r}function We(e,n){return e.$==n.$&&ee(e.a,n.a)}function Oe(e,n,r,t){var o={$:n,r:r,s:t,t:void 0,u:void 0};return e.push(o),o}function Ue(e,n,r,t){if(e!==n){var o=e.$,a=n.$;if(o!==a){if(1!==o||2!==a)return void Oe(r,0,t,n);n=function(e){for(var n=e.e,r=n.length,t=Array(r),o=0;r>o;o++)t[o]=n[o].b;return{$:1,c:e.c,d:e.d,e:t,f:e.f,b:e.b}}(n),a=1}switch(a){case 5:for(var i=e.l,c=n.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(n.k=e.k);n.k=n.m();var f=[];return Ue(e.k,n.k,f,0),void(f.length>0&&Oe(r,1,t,f));case 4:for(var s=e.j,d=n.j,m=!1,v=e.k;4===v.$;)m=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var p=n.k;4===p.$;)m=!0,"object"!=typeof d?d=[d,p.j]:d.push(p.j),p=p.k;return m&&s.length!==d.length?void Oe(r,0,t,n):((m?function(e,n){for(var r=0;e.length>r;r++)if(e[r]!==n[r])return!1;return!0}(s,d):s===d)||Oe(r,2,t,d),void Ue(v,p,r,t+1));case 0:return void(e.a!==n.a&&Oe(r,3,t,n.a));case 1:return void Ye(e,n,r,t,Ge);case 2:return void Ye(e,n,r,t,Ze);case 3:if(e.h!==n.h)return void Oe(r,0,t,n);var g=qe(e.d,n.d);g&&Oe(r,4,t,g);var b=n.i(e.g,n.g);return void(b&&Oe(r,5,t,b))}}}function Ye(e,n,r,t,o){if(e.c===n.c&&e.f===n.f){var a=qe(e.d,n.d);a&&Oe(r,4,t,a),o(e,n,r,t)}else Oe(r,0,t,n)}function qe(e,n,r){var t;for(var o in e)if("a1"!==o&&"a0"!==o&&"a3"!==o&&"a4"!==o)if(o in n){var a=e[o],i=n[o];a===i&&"value"!==o&&"checked"!==o||"a0"===r&&We(a,i)||((t=t||{})[o]=i)}else(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:e[o].f,o:void 0}:"string"==typeof e[o]?"":null;else{var c=qe(e[o],n[o]||{},o);c&&((t=t||{})[o]=c)}for(var l in n)l in e||((t=t||{})[l]=n[l]);return t}function Ge(e,n,r,t){var o=e.e,a=n.e,i=o.length,c=a.length;i>c?Oe(r,6,t,{v:c,i:i-c}):c>i&&Oe(r,7,t,{v:i,e:a});for(var l=c>i?i:c,u=0;l>u;u++){var f=o[u];Ue(f,a[u],r,++t),t+=f.b||0}}function Ze(e,n,r,t){for(var o=[],a={},i=[],c=e.e,l=n.e,u=c.length,f=l.length,s=0,d=0,m=t;u>s&&f>d;){var v=(w=c[s]).a,p=(D=l[d]).a,g=w.b,b=D.b,h=void 0,C=void 0;if(v!==p){var x=c[s+1],T=l[d+1];if(x){var M=x.a,P=x.b;C=p===M}if(T){var y=T.a,L=T.b;h=v===y}if(h&&C)Ue(g,L,o,++m),Ke(a,o,v,b,d,i),m+=g.b||0,Je(a,o,v,P,++m),m+=P.b||0,s+=2,d+=2;else if(h)m++,Ke(a,o,p,b,d,i),Ue(g,L,o,m),m+=g.b||0,s+=1,d+=2;else if(C)Je(a,o,v,g,++m),m+=g.b||0,Ue(P,b,o,++m),m+=P.b||0,s+=2,d+=1;else{if(!x||M!==y)break;Je(a,o,v,g,++m),Ke(a,o,p,b,d,i),m+=g.b||0,Ue(P,L,o,++m),m+=P.b||0,s+=2,d+=2}}else Ue(g,b,o,++m),m+=g.b||0,s++,d++}for(;u>s;){var w;m++,Je(a,o,(w=c[s]).a,g=w.b,m),m+=g.b||0,s++}for(;f>d;){var D,N=N||[];Ke(a,o,(D=l[d]).a,D.b,void 0,N),d++}(o.length>0||i.length>0||N)&&Oe(r,8,t,{w:o,x:i,y:N})}var Xe="_elmW6BL";function Ke(e,n,r,t,o,a){var i=e[r];if(!i)return a.push({r:o,A:i={c:0,z:t,r:o,s:void 0}}),void(e[r]=i);if(1===i.c){a.push({r:o,A:i}),i.c=2;var c=[];return Ue(i.z,t,c,i.r),i.r=o,void(i.s.s={w:c,A:i})}Ke(e,n,r+Xe,t,o,a)}function Je(e,n,r,t,o){var a=e[r];if(a){if(0===a.c){a.c=2;var i=[];return Ue(t,a.z,i,o),void Oe(n,9,o,{w:i,A:a})}Je(e,n,r+Xe,t,o)}else{var c=Oe(n,9,o,void 0);e[r]={c:1,z:t,r:o,s:c}}}function Qe(e,n,r,t){en(e,n,r,0,0,n.b,t)}function en(e,n,r,t,o,a,i){for(var c=r[t],l=c.r;l===o;){var u=c.$;if(1===u)Qe(e,n.k,c.s,i);else if(8===u)c.t=e,c.u=i,(f=c.s.w).length>0&&en(e,n,f,0,o,a,i);else if(9===u){c.t=e,c.u=i;var f,s=c.s;s&&(s.A.s=e,(f=s.w).length>0&&en(e,n,f,0,o,a,i))}else c.t=e,c.u=i;if(!(c=r[++t])||(l=c.r)>a)return t}var d=n.$;if(4===d){for(var m=n.k;4===m.$;)m=m.k;return en(e,m,r,t,o+1,a,e.elm_event_node_ref)}for(var v=n.e,p=e.childNodes,g=0;v.length>g;g++){o++;var b=1===d?v[g]:v[g].b,h=o+(b.b||0);if(!(o>l||l>h||(c=r[t=en(p[g],b,r,t,o,h,i)])&&(l=c.r)<=a))return t;o=h}return t}function nn(e,n){for(var r=0;n.length>r;r++){var t=n[r],o=t.t,a=rn(o,t);o===e&&(e=a)}return e}function rn(e,n){switch(n.$){case 0:return c=e,l=n.s,u=n.u,f=c.parentNode,(s=Be(l,u)).elm_event_node_ref||(s.elm_event_node_ref=c.elm_event_node_ref),f&&s!==c&&f.replaceChild(s,c),s;case 4:return ke(e,n.u,n.s),e;case 3:return e.replaceData(0,e.length,n.s),e;case 1:return nn(e,n.s);case 2:return e.elm_event_node_ref?e.elm_event_node_ref.j=n.s:e.elm_event_node_ref={j:n.s,p:n.u},e;case 6:for(var r=n.s,t=0;r.i>t;t++)e.removeChild(e.childNodes[r.v]);return e;case 7:for(var o=(r=n.s).e,a=e.childNodes[t=r.v];o.length>t;t++)e.insertBefore(Be(o[t],n.u),a);return e;case 9:if(!(r=n.s))return e.parentNode.removeChild(e),e;var i=r.A;return void 0!==i.r&&e.parentNode.removeChild(e),i.s=nn(e,r.w),e;case 8:return function(e,n){var r=n.s,t=function(e,n){if(e){for(var r=we.createDocumentFragment(),t=0;e.length>t;t++){var o=e[t].A;De(r,2===o.c?o.s:Be(o.z,n.u))}return r}}(r.y,n);e=nn(e,r.w);for(var o=r.x,a=0;o.length>a;a++){var i=o[a],c=i.A,l=2===c.c?c.s:Be(c.z,n.u);e.insertBefore(l,e.childNodes[i.r])}return t&&De(e,t),e}(e,n);case 5:return n.s(e);default:b(10)}var c,l,u,f,s}function tn(e){if(3===e.nodeType)return Ne(e.textContent);if(1!==e.nodeType)return Ne("");for(var n=L,r=e.attributes,t=r.length;t--;){var o=r[t];n=w(l(Ae,o.name,o.value),n)}var a=e.tagName.toLowerCase(),i=L,c=e.childNodes;for(t=c.length;t--;)i=w(tn(c[t]),i);return u(_e,a,n,i)}var on=o((function(e,n,r,t){return function(n,r,o,a,i,c){var u=l(G,n,r?r.flags:void 0);Er(u)||b(2);var f={},s=o(u.a),d=s.a,m=function(n,r){var o=e.e6,a=t.node,i=tn(a);return function(e,n){n(e);var r=0;function t(){r=1===r?0:(cn(t),n(e),1)}return function(o,a){e=o,a?(n(e),2===r&&(r=1)):(0===r&&cn(t),r=2)}}(r,(function(e){var r,t=o(e),c=(Ue(i,t,r=[],0),r);a=function(e,n,r,t){return 0===r.length?e:(Qe(e,n,r,t),nn(e,r))}(a,i,c,n),i=t}))}(p,d),v=function(e,n){var r;for(var t in ve){var o=ve[t];o.a&&((r=r||{})[t]=o.a(t,n)),e[t]=ge(o,n)}return r}(f,p);function p(e,n){var r=l(a,e,d);m(d=r.a,n),Pe(f,r.b,i(d))}return Pe(f,s.b,i(d)),v?{ports:v}:{}}(n,t,e.eI,e.e3,e.e0)})),an="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(e){clearTimeout(e)},cn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){return setTimeout(e,1e3/60)},ln={addEventListener:function(){},removeEventListener:function(){}},un="undefined"!=typeof document?document:ln,fn="undefined"!=typeof window?window:ln,sn=t((function(e,n,r){return ce(te((function(){function t(e){ie(r(e))}return e.addEventListener(n,t,Se&&{passive:!0}),function(){e.removeEventListener(n,t)}})))})),dn=r((function(e,n){var r=Z(e,n);return Er(r)?ur(r.a):fr})),mn=r((function(e,n){return new Float64Array([e,n])}));new Float64Array(3),new Float64Array(3),new Float64Array(3);var vn=t((function(e,n,r){return new Float64Array([e,n,r])})),pn=r((function(e,n){return new Float64Array([n[0]*e,n[1]*e,n[2]*e])})),gn=o((function(e,n,r,t){return new Float64Array([e,n,r,t])}));new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var bn=0;function hn(e,n){for(;n.b;n=n.b)e(n.a)}function Cn(e){for(var n=0;e.b;e=e.b)n++;return n}var xn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){setTimeout(e,1e3/60)},Tn=a((function(e,n,r,t,o){return{$:0,a:e,b:n,c:r,d:t,e:o}})),Mn=r((function(e,n){var r=e.blend;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.BLEND),r.enabled=!0),r.a===n.a&&r.d===n.d||(e.gl.blendEquationSeparate(n.a,n.d),r.a=n.a,r.d=n.d),r.b===n.b&&r.c===n.c&&r.e===n.e&&r.f===n.f||(e.gl.blendFuncSeparate(n.b,n.c,n.e,n.f),r.b=n.b,r.c=n.c,r.e=n.e,r.f=n.f),r.g===n.g&&r.h===n.h&&r.i===n.i&&r.j===n.j||(e.gl.blendColor(n.g,n.h,n.i,n.j),r.g=n.g,r.h=n.h,r.i=n.i,r.j=n.j)})),Pn=r((function(e,n){var r=e.depthTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.DEPTH_TEST),r.enabled=!0),r.a!==n.a&&(e.gl.depthFunc(n.a),r.a=n.a),r.b!==n.b&&(e.gl.depthMask(n.b),r.b=n.b),r.c===n.c&&r.d===n.d||(e.gl.depthRange(n.c,n.d),r.c=n.c,r.d=n.d)})),yn=r((function(e,n){var r=e.stencilTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.STENCIL_TEST),r.enabled=!0),r.d===n.d&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.FRONT,n.d,n.a,n.b),r.d=n.d),r.e===n.e&&r.f===n.f&&r.g===n.g||(e.gl.stencilOpSeparate(e.gl.FRONT,n.e,n.f,n.g),r.e=n.e,r.f=n.f,r.g=n.g),r.c!==n.c&&(e.gl.stencilMask(n.c),r.c=n.c),r.h===n.h&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.BACK,n.h,n.a,n.b),r.h=n.h,r.a=n.a,r.b=n.b),r.i===n.i&&r.j===n.j&&r.k===n.k||(e.gl.stencilOpSeparate(e.gl.BACK,n.i,n.j,n.k),r.i=n.i,r.j=n.j,r.k=n.k)})),Ln=r((function(e,n){var r=e.scissor;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SCISSOR_TEST),r.enabled=!0),r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.scissor(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)})),wn=r((function(e,n){var r=e.colorMask;r.toggle=e.toggle,r.enabled=!0,r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.colorMask(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)})),Dn=r((function(e,n){var r=e.cullFace;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.CULL_FACE),r.enabled=!0),r.a!==n.a&&(e.gl.cullFace(n.a),r.a=n.a)})),Nn=r((function(e,n){var r=e.polygonOffset;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.polygonOffset(n.a,n.b),r.a=n.a,r.b=n.b)})),Sn=r((function(e,n){var r=e.sampleCoverage;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.sampleCoverage(n.a,n.b),r.a=n.a,r.b=n.b)})),_n=function(e){e.scissor.enabled&&(e.gl.disable(e.gl.SCISSOR_TEST),e.scissor.enabled=!1)},zn=function(e){var n=e.colorMask;n.a&&n.b&&n.c&&n.d||(e.gl.colorMask(!0,!0,!0,!0),n.a=!0,n.b=!0,n.c=!0,n.d=!0)},$n=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],An=[function(e){e.blend.enabled&&(e.gl.disable(e.gl.BLEND),e.blend.enabled=!1)},function(e){e.depthTest.enabled&&(e.gl.disable(e.gl.DEPTH_TEST),e.depthTest.enabled=!1)},function(e){e.stencilTest.enabled&&(e.gl.disable(e.gl.STENCIL_TEST),e.stencilTest.enabled=!1)},_n,zn,function(e){e.gl.disable(e.gl.CULL_FACE)},function(e){e.gl.disable(e.gl.POLYGON_OFFSET_FILL)},function(e){e.gl.disable(e.gl.SAMPLE_COVERAGE)},function(e){e.gl.disable(e.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function Rn(e,n,r){var t=e.createShader(r);return e.shaderSource(t,"#extension GL_OES_standard_derivatives : enable\n"+n),e.compileShader(t),t}function Fn(e,n){switch(n){case e.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:e.FLOAT};case e.INT:return{size:1,arraySize:1,type:Int32Array,baseType:e.INT}}}function Bn(e,n,r,t){for(var o=r.a.c1,a=[],i=0;o>i;i++)a.push(String.fromCharCode(97+i));var c=Fn(e,n.type);if(void 0===c)throw Error("No info available for: "+n.type);var l=0,u=c.size*c.arraySize*o,f=new c.type(Cn(r.b)*u);hn((function(e){!function(e,n,r,t,i){var c;if(1===o)for(c=0;n>c;c++)e[r++]=1===n?t[i]:t[i][c];else a.forEach((function(o){for(c=0;n>c;c++)e[r++]=1===n?t[o][i]:t[o][i][c]}))}(f,c.size*c.arraySize,l,e,t[n.name]||n.name),l+=u}),r.b);var s=e.createBuffer();return e.bindBuffer(e.ARRAY_BUFFER,s),e.bufferData(e.ARRAY_BUFFER,f,e.STATIC_DRAW),s}function kn(e,n){return e+"#"+n}var En=r((function(e,n){var r=e.f,t=r.gl;return t?(t.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight),r.depthTest.b||(t.depthMask(!0),r.depthTest.b=!0),r.stencilTest.c!==r.STENCIL_WRITEMASK&&(t.stencilMask(r.STENCIL_WRITEMASK),r.stencilTest.c=r.STENCIL_WRITEMASK),_n(r),zn(r),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT|t.STENCIL_BUFFER_BIT),hn((function(n){if(n.d.b.b){var o,a,i,c,l;if(n.b.id&&n.c.id&&(o=kn(n.b.id,n.c.id),a=r.programs[o]),!a){var u,f;n.b.id?u=r.shaders[n.b.id]:n.b.id=bn++,u||(u=Rn(t,n.b.src,t.VERTEX_SHADER),r.shaders[n.b.id]=u),n.c.id?f=r.shaders[n.c.id]:n.c.id=bn++,f||(f=Rn(t,n.c.src,t.FRAGMENT_SHADER),r.shaders[n.c.id]=f);var s=function(e,n,r){var t=e.createProgram();if(e.attachShader(t,n),e.attachShader(t,r),e.linkProgram(t),!e.getProgramParameter(t,e.LINK_STATUS))throw"Link failed: "+e.getProgramInfoLog(t)+"\nvs info-log: "+e.getShaderInfoLog(n)+"\nfs info-log: "+e.getShaderInfoLog(r);return t}(t,u,f);(a={glProgram:s,attributes:Object.assign({},n.b.attributes,n.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(e,n,r,t){var o=r.glProgram,a=r.currentUniforms,i=0,c=n.f;function l(n,r){var t=r.name,o=e.getUniformLocation(n,t);switch(r.type){case e.INT:return function(n){a[t]!==n&&(e.uniform1i(o,n),a[t]=n)};case e.FLOAT:return function(n){a[t]!==n&&(e.uniform1f(o,n),a[t]=n)};case e.FLOAT_VEC2:return function(n){a[t]!==n&&(e.uniform2f(o,n[0],n[1]),a[t]=n)};case e.FLOAT_VEC3:return function(n){a[t]!==n&&(e.uniform3f(o,n[0],n[1],n[2]),a[t]=n)};case e.FLOAT_VEC4:return function(n){a[t]!==n&&(e.uniform4f(o,n[0],n[1],n[2],n[3]),a[t]=n)};case e.FLOAT_MAT4:return function(n){a[t]!==n&&(e.uniformMatrix4fv(o,!1,new Float32Array(n)),a[t]=n)};case e.SAMPLER_2D:var l=i++;return function(n){e.activeTexture(e.TEXTURE0+l);var r=c.textures.get(n);r||(r=n.el(e),c.textures.set(n,r)),e.bindTexture(e.TEXTURE_2D,r),a[t]!==n&&(e.uniform1i(o,l),a[t]=n)};case e.BOOL:return function(n){a[t]!==n&&(e.uniform1i(o,n),a[t]=n)};default:return function(){}}}for(var u={},f=e.getProgramParameter(o,e.ACTIVE_UNIFORMS),s=0;f>s;s++){var d=e.getActiveUniform(o,s);u[t[d.name]||d.name]=l(o,d)}return u}(t,e,a,Object.assign({},n.b.uniforms,n.c.uniforms));var d=t.getProgramParameter(s,t.ACTIVE_ATTRIBUTES);for(i=0;d>i;i++){var m=t.getActiveAttrib(s,i),v=t.getAttribLocation(s,m.name);a.activeAttributes.push(m),a.activeAttributeLocations.push(v)}o=kn(n.b.id,n.c.id),r.programs[o]=a}r.lastProgId!==o&&(t.useProgram(a.glProgram),r.lastProgId=o),c=a.uniformSetters,Object.keys(l=n.e).forEach((function(e){var n=c[e];n&&n(l[e])}));var p=r.buffers.get(n.d);for(p||(p=function(e,n){if(n.a.c9>0){var r=e.createBuffer(),t=(o=n.c,a=n.a.c9,c=new Uint32Array(Cn(o)*a),l=0,hn((function(e){if(1===a)c[l++]=e;else for(i=0;a>i;i++)c[l++]=e[String.fromCharCode(97+i)]}),o),c);return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}}var o,a,i,c,l;return{numIndices:n.a.c1*Cn(n.b),indexBuffer:null,buffers:{}}}(t,n.d),r.buffers.set(n.d,p)),i=0;a.activeAttributes.length>i;i++){v=a.activeAttributeLocations[i],void 0===p.buffers[(m=a.activeAttributes[i]).name]&&(p.buffers[m.name]=Bn(t,m,n.d,a.attributes)),t.bindBuffer(t.ARRAY_BUFFER,p.buffers[m.name]);var g=Fn(t,m.type);if(1===g.arraySize)t.enableVertexAttribArray(v),t.vertexAttribPointer(v,g.size,g.baseType,!1,0,0);else for(var b=4*g.size,h=b*g.arraySize,C=0;g.arraySize>C;C++)t.enableVertexAttribArray(v+C),t.vertexAttribPointer(v+C,g.size,g.baseType,!1,h,b*C)}for(r.toggle=!r.toggle,hn(Ua(r),n.a),i=0;9>i;i++){var x=r[$n[i]];x.toggle!==r.toggle&&x.enabled&&(An[i](r),x.enabled=!1,x.toggle=r.toggle)}p.indexBuffer?(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,p.indexBuffer),t.drawElements(n.d.a.dH,p.numIndices,t.UNSIGNED_INT,0)):t.drawArrays(n.d.a.dH,0,p.numIndices)}}),e.g),n):n})),Vn=t((function(e,n,r){return t={g:r,f:{},h:e},o=Yn,a=qn,{$:3,d:Re(n),g:t,h:o,i:a};var t,o,a})),jn=r((function(e,n){e.contextAttributes.alpha=!0,e.contextAttributes.premultipliedAlpha=n.a})),Hn=r((function(e,n){e.contextAttributes.depth=!0,e.sceneSettings.push((function(e){e.clearDepth(n.a)}))})),In=r((function(e,n){e.contextAttributes.stencil=!0,e.sceneSettings.push((function(e){e.clearStencil(n.a)}))})),Wn=r((function(e){e.contextAttributes.antialias=!0})),On=r((function(e,n){e.sceneSettings.push((function(e){e.clearColor(n.a,n.b,n.c,n.d)}))})),Un=r((function(e){e.contextAttributes.preserveDrawingBuffer=!0}));function Yn(e){var n={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]};hn((function(e){return l(Oa,n,e)}),e.h);var r=we.createElement("canvas"),t=r.getContext&&(r.getContext("webgl",n.contextAttributes)||r.getContext("experimental-webgl",n.contextAttributes));return t&&"undefined"!=typeof WeakMap?(n.sceneSettings.forEach((function(e){e(t)})),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),e.f.gl=t,e.f.toggle=!1,e.f.blend={enabled:!1,toggle:!1},e.f.depthTest={enabled:!1,toggle:!1},e.f.stencilTest={enabled:!1,toggle:!1},e.f.scissor={enabled:!1,toggle:!1},e.f.colorMask={enabled:!1,toggle:!1},e.f.cullFace={enabled:!1,toggle:!1},e.f.polygonOffset={enabled:!1,toggle:!1},e.f.sampleCoverage={enabled:!1,toggle:!1},e.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},e.f.shaders=[],e.f.programs={},e.f.lastProgId=null,e.f.buffers=new WeakMap,e.f.textures=new WeakMap,e.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),xn((function(){return l(En,e,r)}))):(r=we.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function qn(e,n){return n.f=e.f,En(n)}var Gn=D,Zn=t((function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.d,o=e,a=u(e,r.b,r.c,u(Zn,e,n,r.e));e=o,n=a,r=t}})),Xn=function(e){return u(Zn,t((function(e,n,r){return l(Gn,M(e,n),r)})),L,e)},Kn=1,Jn=2,Qn=0,er=r((function(e,n){return{$:0,a:e,b:n}})),nr=function(e){return{$:1,a:e}},rr=function(e){return{$:1,a:e}},tr=r((function(e,n){return{$:3,a:e,b:n}})),or=r((function(e,n){return{$:0,a:e,b:n}})),ar=r((function(e,n){return{$:1,a:e,b:n}})),ir=function(e){return{$:0,a:e}},cr=function(e){return{$:2,a:e}},lr=_,ur=function(e){return{$:0,a:e}},fr={$:1},sr=H,dr=r((function(e,n){return l(j,e,function(e){for(var n=[];e.b;e=e.b)n.push(e.a);return n}(n))})),mr=t((function(e,n,r){for(;;){if(!r.b)return n;var t=r.b,o=e,a=l(e,r.a,n);e=o,n=a,r=t}})),vr=function(e){return u(mr,r((function(e,n){return n+1})),0,e)},pr=S,gr=t((function(e,n,r){for(;;){if(x(e,n)>=1)return r;var t=e,o=n-1,a=l(Gn,n,r);e=t,n=o,r=a}})),br=r((function(e,n){return u(gr,e,n,L)})),hr=r((function(e,n){return u(pr,e,l(br,0,vr(n)-1),n)})),Cr=function(e){return u(mr,Gn,L,e)},xr=32,Tr=o((function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}})),Mr=[],Pr=F,yr=r((function(e,n){return V(n)/V(e)})),Lr=Pr(l(yr,2,xr)),wr=f(Tr,0,Lr,Mr,Mr),Dr=v,Nr=function(e){return{$:1,a:e}},Sr=B,_r=function(e){return e.length},zr=r((function(e,n){return x(e,n)>0?e:n})),$r=p,Ar=r((function(e,n){for(;;){var r=l($r,xr,e),t=r.b,o=l(Gn,{$:0,a:r.a},n);if(!t.b)return Cr(o);e=t,n=o}})),Rr=r((function(e,n){for(;;){var r=Pr(n/xr);if(1===r)return l($r,xr,e).a;e=l(Ar,e,L),n=r}})),Fr=r((function(e,n){if(n.m){var r=n.m*xr,t=Sr(l(yr,xr,r-1)),o=e?Cr(n.A):n.A,a=l(Rr,o,n.m);return f(Tr,_r(n.q)+r,l(zr,5,t*Lr),a,n.q)}return f(Tr,_r(n.q),Lr,Mr,n.q)})),Br=a((function(e,n,r,t,o){for(;;){if(0>n)return l(Fr,!1,{A:t,m:r/xr|0,q:o});var a=Nr(u(Dr,xr,n,e));n-=xr,t=l(Gn,a,t)}})),kr=r((function(e,n){if(e>0){var r=e%xr;return s(Br,n,e-r-xr,e,L,u(Dr,r,e-r,n))}return wr})),Er=function(e){return!e.$},Vr=xe,jr=Y,Hr=q,Ir=function(e){switch(e.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},Wr=function(e){return e},Or=re,Ur=Or(0),Yr=o((function(e,n,r,t){if(t.b){var o=t.a,a=t.b;if(a.b){var i=a.a,c=a.b;if(c.b){var s=c.a,d=c.b;if(d.b){var m=d.b;return l(e,o,l(e,i,l(e,s,l(e,d.a,r>500?u(mr,e,n,Cr(m)):f(Yr,e,n,r+1,m)))))}return l(e,o,l(e,i,l(e,s,n)))}return l(e,o,l(e,i,n))}return l(e,o,n)}return n})),qr=t((function(e,n,r){return f(Yr,e,n,0,r)})),Gr=r((function(e,n){return u(qr,r((function(n,r){return l(Gn,e(n),r)})),L,n)})),Zr=oe,Xr=r((function(e,n){return l(Zr,(function(n){return Or(e(n))}),n)})),Kr=t((function(e,n,r){return l(Zr,(function(n){return l(Zr,(function(r){return Or(l(e,n,r))}),r)}),n)})),Jr=function(e){return u(qr,Kr(Gn),Or(L),e)},Qr=be,et=r((function(e,n){var r=n;return ce(l(Zr,Qr(e),r))})),nt=t((function(e,n){return l(Xr,(function(){return 0}),Jr(l(Gr,et(e),n)))})),rt=t((function(){return Or(0)})),tt=r((function(e,n){return l(Xr,e,n)}));ve.Task=pe(Ur,nt,rt,tt);var ot,at=Ce("Task"),it=r((function(e,n){return at(l(Xr,e,n))})),ct=on,lt=(ot=function(){var e,n;return{dX:(e=un.body,n=un.documentElement,{fa:Math.max(e.scrollWidth,e.offsetWidth,n.scrollWidth,n.offsetWidth,n.clientWidth),eE:Math.max(e.scrollHeight,e.offsetHeight,n.scrollHeight,n.offsetHeight,n.clientHeight)}),e8:{d6:fn.pageXOffset,d7:fn.pageYOffset,fa:un.documentElement.clientWidth,eE:un.documentElement.clientHeight}}},te((function(e){cn((function(){e(re(ot()))}))}))),ut=k,ft=M({bk:500,bl:500,bs:0},l(it,(function(e){var n=e.e8;return l(er,ut(n.fa),ut(n.eE))}),lt)),st=function(e){return{$:1,a:e}},dt=t((function(e,n,r){return{cv:r,dU:n,d_:e}})),mt=Or(u(dt,L,fr,0)),vt=function(e){return te((function(n){var r=e.f;2===r.$&&r.c&&r.c(),e.f=null,n(re(0))}))},pt=te((function(e){e(re(Date.now()))})),gt=te((function(e){var n=cn((function(){e(re(Date.now()))}));return function(){an(n)}})),bt=he,ht=ce,Ct=t((function(e,n,r){var t=r.dU,o=r.cv,a=M(t,n);return 1===a.a.$?a.b.b?l(Zr,(function(e){return l(Zr,(function(r){return Or(u(dt,n,ur(e),r))}),pt)}),ht(l(Zr,bt(e),gt))):mt:a.b.b?Or(u(dt,n,t,o)):l(Zr,(function(){return mt}),vt(a.a.a))})),xt=Wr,Tt=t((function(e,n,r){var t=r.d_,o=r.cv,a=function(r){return l(Qr,e,(0,r.a)(r.$?n-o:xt(n)))};return l(Zr,(function(e){return l(Zr,(function(){return Or(u(dt,t,ur(e),n))}),Jr(l(Gr,a,t)))}),ht(l(Zr,bt(e),gt)))})),Mt=t((function(e,n,r){return e(n(r))}));ve["Browser.AnimationManager"]=pe(mt,Ct,Tt,0,r((function(e,n){return n.$?st(l(Mt,e,n.a)):{$:0,a:l(Mt,e,n.a)}})));var Pt=Ce("Browser.AnimationManager"),yt=O,Lt=W,wt=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),Dt=r((function(e,n){return{dM:n,d_:e}})),Nt={$:-2},St=Nt,_t=Or(l(Dt,L,St)),zt=function(e){return M(y(e.a?"w_":"d_",e.b),e)},$t=a((function(e,n,r,t,o){return{$:-1,a:e,b:n,c:r,d:t,e:o}})),At=a((function(e,n,r,t,o){if(-1!==o.$||o.a){if(-1!==t.$||t.a||-1!==t.d.$||t.d.a)return s($t,e,n,r,t,o);var a=t.d;return i=t.e,s($t,0,t.b,t.c,s($t,1,a.b,a.c,a.d,a.e),s($t,1,n,r,i,o))}var i,c=o.b,l=o.c,u=o.d,f=o.e;return-1!==t.$||t.a?s($t,e,c,l,s($t,0,n,r,t,u),f):s($t,0,n,r,s($t,1,t.b,t.c,t.d,i=t.e),s($t,1,c,l,u,f))})),Rt=T,Ft=t((function(e,n,r){if(-2===r.$)return s($t,0,e,n,Nt,Nt);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(l(Rt,e,o)){case 0:return s(At,t,o,a,u(Ft,e,n,i),c);case 1:return s($t,t,o,n,i,c);default:return s(At,t,o,a,i,u(Ft,e,n,c))}})),Bt=t((function(e,n,r){var t=u(Ft,e,n,r);return-1!==t.$||t.a?t:s($t,1,t.b,t.c,t.d,t.e)})),kt=function(e){return u(mr,r((function(e,n){return u(Bt,e.a,e.b,n)})),St,e)},Et=t((function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.e,o=e,a=u(e,r.b,r.c,u(Et,e,n,r.d));e=o,n=a,r=t}})),Vt=i((function(e,n,o,a,i,c){var l=u(Et,t((function(r,t,a){e:for(;;){var i=a.a,c=a.b;if(i.b){var l=i.a,s=l.a,d=l.b,m=i.b;if(0>x(s,r)){a=M(m,u(e,s,d,c));continue e}return x(s,r)>0?M(i,u(o,r,t,c)):M(m,f(n,s,d,t,c))}return M(i,u(o,r,t,c))}})),M(Xn(a),c),i),s=l.a,d=l.b;return u(mr,r((function(n,r){return u(e,n.a,n.b,r)})),d,s)})),jt=r((function(e,n){return{c4:n,db:e}})),Ht=t((function(e,n,r){return l(Xr,(function(e){return M(n,e)}),u(sn,r.a?fn:un,r.b,(function(r){return l(bt,e,l(jt,n,r))})))})),It=r((function(e,n){return u(Et,Bt,n,e)})),Wt=t((function(e,n,r){var a=t((function(n,r,t){var o=t.c;return P(t.a,t.b,l(Gn,u(Ht,e,n,r),o))})),i=t((function(e,n,r){var t=r.b,o=r.c;return P(l(Gn,n,r.a),t,o)})),c=o((function(e,n,r,t){var o=t.c;return P(t.a,u(Bt,e,n,t.b),o)})),f=l(Gr,zt,n),s=d(Vt,i,c,a,r.dM,kt(f),P(L,St,L)),m=s.b,v=s.c;return l(Zr,(function(e){return Or(l(Dt,f,l(It,m,kt(e))))}),l(Zr,(function(){return Jr(v)}),Jr(l(Gr,vt,s.a))))})),Ot=t((function(e,n,r){var t=e(n);return t.$?r:l(Gn,t.a,r)})),Ut=r((function(e,n){return u(qr,Ot(e),L,n)})),Yt=t((function(e,n,r){var t=n.db,o=n.c4,a=l(Ut,(function(e){var n=e.b.c;return h(e.a,t)?l(dn,n,o):fr}),r.d_);return l(Zr,(function(){return Or(r)}),Jr(l(Gr,Qr(e),a)))})),qt=r((function(e,n){return u(wt,n.a,n.b,l(jr,e,n.c))}));ve["Browser.Events"]=pe(_t,Wt,Yt,0,qt);var Gt,Zt,Xt,Kt,Jt,Qt,eo,no,ro,to,oo,ao,io,co,lo,uo,fo,so,mo,vo,po,go,bo,ho,Co=Ce("Browser.Events"),xo=t((function(e,n,r){return Co(u(wt,e,n,r))})),To=xe,Mo=To(L),Po=r((function(e,n){return M(function(e,n){var r={};for(var t in e)r[t]=e[t];for(var t in n)r[t]=n[t];return r}(n,e.$?{bs:n.bs+e.a}:{bk:e.a,bl:e.b}),Mo)})),yo=r((function(e,n){var r=n;return function(n){var t=r(n),o=t.b;return e(t.a)(o)}})),Lo=o((function(e,n,r,t){return{$:2,a:e,b:n,c:r,d:t}})),wo=o((function(e,n,r,t){return{$:3,a:e,b:n,c:r,d:t}})),Do=o((function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}})),No=o((function(e,n,r,t){return{$:6,a:e,b:n,c:r,d:t}})),So=o((function(e,n,r,t){return{$:7,a:e,b:n,c:r,d:t}})),_o=o((function(e,n,r,t){return{$:5,a:e,b:n,c:r,d:t}})),zo=o((function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}})),$o={$:0},Ao=r((function(e,n){return l(zr,e,n)})),Ro=r((function(e,n){return 0>x(e,n)?e:n})),Fo=r((function(e,n){return l(Ro,e,n)})),Bo=c((function(e,n,r,t,o,a,i,c){for(;;){if(!c.b)return{dA:n,dB:t,dC:a,dD:e,dE:r,dF:o};var u=c.b,f=i(c.a);e=l(Fo,f.dD,e),n=l(Ao,f.dA,n),r=l(Fo,f.dE,r),t=l(Ao,f.dB,t),o=l(Fo,f.dF,o),a=l(Ao,f.dC,a),c=u}})),ko=t((function(e,n,r){var t=e(n);return m(Bo,t.dD,t.dA,t.dE,t.dB,t.dF,t.dC,e,r)})),Eo=r((function(e,n){return 1>x(n,e)})),Vo=function(e){return e},jo=function(e){return e.d6},Ho=function(e){return e.d7},Io=function(e){return e.b5},Wo=function(e){var n,r=e.a,t=e.b,o=e.c,a=jo(r),i=Ho(r),c=Io(r),u=jo(t),f=Ho(t),s=Io(t),d=jo(o),m=Ho(o),v=Io(o);return l(Eo,(n={dA:l(Ao,a,l(Ao,u,d)),dB:l(Ao,i,l(Ao,f,m)),dC:l(Ao,c,l(Ao,s,v)),dD:l(Fo,a,l(Fo,u,d)),dE:l(Fo,i,l(Fo,f,m)),dF:l(Fo,c,l(Fo,s,v))}).dA,n.dD)&&l(Eo,n.dB,n.dE)&&l(Eo,n.dC,n.dF)?n:{dA:l(Ao,n.dD,n.dA),dB:l(Ao,n.dE,n.dB),dC:l(Ao,n.dF,n.dC),dD:l(Fo,n.dD,n.dA),dE:l(Fo,n.dE,n.dB),dF:l(Fo,n.dF,n.dC)}},Oo=function(e){return new Float64Array([e.d6,e.d7,e.b5])},Uo=function(e){return Oo(e)},Yo=function(e){return Oo(e)},qo=r((function(e,n){return{d6:n.d7*e.b5-n.b5*e.d7,d7:n.b5*e.d6-n.d6*e.b5,b5:n.d6*e.d7-n.d7*e.d6}})),Go=r((function(e,n){return{d6:n.d6-e.d6,d7:n.d7-e.d7,b5:n.b5-e.b5}})),Zo=function(e){return 0>e?-e:e},Xo=E,Ko={d6:0,d7:0,b5:0},Jo=r((function(e,n){var r=e,t=n,o=l(zr,Zo(t.d6),l(zr,Zo(t.d7),Zo(t.b5)));if(o){var a=t.b5/o,i=t.d7/o,c=t.d6/o,u=Xo(c*c+i*i+a*a);return{d6:r*c/u,d7:r*i/u,b5:r*a/u}}return Ko})),Qo=Jo(1),ea=t((function(e,n,r){return Qo(l(qo,l(Go,n,r),l(Go,e,n)))})),na=function(e){var n=e.a,r=e.b,t=e.c,o=Yo(u(ea,n,r,t));return P({p:o,bZ:Uo(n)},{p:o,bZ:Uo(r)},{p:o,bZ:Uo(t)})},ra=r((function(e,n){return{$:2,a:e,b:n}})),ta=ra({c1:3,c9:0,dH:4}),oa=t((function(e,n,r){return P(e,n,r)})),aa=r((function(e,n){return e*n})),ia=t((function(e,n,r){return{d6:e,d7:n,b5:r}})),ca=(Gt=l(aa,-.5,1),Zt=l(aa,-.5,1),Xt=l(aa,-.5,1),Kt=u(ia,Xt,Zt,Gt),Jt=l(aa,.5,1),Qt=u(ia,Xt,Zt,Jt),eo=l(aa,.5,1),no=u(ia,Xt,eo,Gt),ro=u(ia,Xt,eo,Jt),to=l(aa,.5,1),oo=u(ia,to,Zt,Gt),ao=u(ia,to,eo,Gt),io=u(ia,to,Zt,Jt),co=u(ia,to,eo,Jt),function(e){switch(e.$){case 0:case 8:case 9:default:return e;case 1:return f(zo,e.a,e.b,e.c,1);case 2:return f(Lo,e.a,e.b,e.c,1);case 3:return f(wo,e.a,e.b,e.c,1);case 4:return f(Do,e.a,e.b,e.c,1);case 5:return f(_o,e.a,e.b,e.c,1);case 6:return f(No,e.a,e.b,e.c,1);case 7:return f(So,e.a,e.b,e.c,1)}}(function(e){if(e.b){var n=e.a,r=e.b,t=ta(l(Gr,na,e));return f(Lo,u(ko,Wo,n,r),e,t,0)}return $o}(N([u(oa,Kt,ao,oo),u(oa,Kt,no,ao),u(oa,Qt,io,co),u(oa,Qt,co,ro),u(oa,oo,ao,co),u(oa,oo,co,io),u(oa,Kt,ro,no),u(oa,Kt,Qt,ro),u(oa,Kt,oo,io),u(oa,Kt,io,Qt),u(oa,no,co,ao),u(oa,no,ro,co)])))),la={$:0},ua=t((function(e,n,r){return{$:1,a:e,b:n,c:r}})),fa=t((function(e,n,r){var t=n.a,o=n.b,a=e(n.c),i=e(o),c=e(t),f=Yo(u(ea,c,i,a)),s={p:f,bZ:Uo(c)},d={p:f,bZ:Uo(i)},m={p:f,bZ:Uo(a)};return l(Gn,s,l(Gn,d,l(Gn,m,r)))})),sa=o((function(e,n,r,t){return 1===n.$||1===r.$||1===t.$?fr:ur(u(e,n.a,r.a,t.a))})),da=4294967295>>>32-Lr,ma=g,va=t((function(e,n,r){for(;;){var t=l(ma,da&n>>>e,r);if(t.$)return l(ma,da&n,t.a);e-=Lr,r=t.a}})),pa=r((function(e,n){var r=n.a,t=n.b,o=n.c,a=n.d;return 0>e||x(e,r)>-1?fr:x(e,r>>>5<<5)>-1?ur(l(ma,da&e,a)):ur(u(va,t,e,o))})),ga=r((function(e,n){return l(pa,e,n.am)})),ba=t((function(e,n,r){for(;;){var t=l($r,xr,e),o=t.a,a=t.b;if(0>x(_r(o),xr))return l(Fr,!0,{A:n,m:r,q:o});e=a,n=l(Gn,Nr(o),n),r+=1}})),ha=function(e){return e.b?u(ba,e,L,0):wr},Ca=r((function(e,n){for(;;){if(!n.b)return!1;var r=n.b;if(e(n.a))return!0;n=r}})),xa=function(e){return!e},Ta=r((function(e,n){return!l(Ca,l(Mt,xa,e),n)})),Ma=r((function(e,n){return u(qr,r((function(n,r){return e(n)?l(Gn,n,r):r})),L,n)})),Pa=r((function(e,n){var r=e.a,t=function(e){var n=e.a,t=e.b,o=e.c;return n>=0&&0>x(n,r)&&t>=0&&0>x(t,r)&&o>=0&&0>x(o,r)};return l(Ta,t,n)?{E:n,am:e}:{E:l(Ma,t,n),am:e}})),ya=t((function(e,n,r){return{$:3,a:e,b:n,c:r}})),La=ya({c1:1,c9:3,dH:4}),wa=r((function(e,n){var r=n;return M(P(e.d6,e.d7,e.b5),P(r.d6,r.d7,r.b5))})),Da=r((function(e,n){e:for(;;){if(-2===n.$)return fr;var r=n.c,t=n.d,o=n.e;switch(l(Rt,e,n.b)){case 0:n=t;continue e;case 1:return ur(r);default:n=o;continue e}}})),Na=vn,Sa=u(Na,0,0,0),_a=i((function(e,n,r,t,o,a){var i=a.a,c=a.b,u=a.c,f=l(Da,l(wa,e,n),o);if(f.$){var s={p:Sa,bZ:Uo(n)},d={p:Sa,bZ:Uo(e)},m=u+1;return P(l(Gn,P(r,u,m),l(Gn,P(r,m,t),i)),l(Gn,s,l(Gn,d,c)),u+2)}return P(l(Gn,P(r,f.a,t),i),c,u)})),za=a((function(e,n,r,t,o){for(;;){if(!r.b)return M(o.a,Cr(o.b));var a=r.a,i=a.a,c=a.b,l=r.b,u=e(a.c),f=e(c),s=e(i),m=t+2,v=t+1,p=e,g=n,b=l,h=t+3,C=d(_a,u,s,m,t,n,d(_a,f,u,v,m,n,d(_a,s,f,t,v,n,o)));e=p,n=g,r=b,t=h,o=C}})),$a=a((function(e,n,r,t,o){for(;;){if(!n.b)return P(t,o,r);var a=n.a,i=a.a,c=a.b,f=n.b,s=e(a.c),d=e(c),m=e(i),v=r+2,p=r+1,g=r,b=u(Bt,l(wa,m,s),v,u(Bt,l(wa,s,d),p,u(Bt,l(wa,d,m),g,o)));n=f,r+=3,t=l(Gn,P(g,p,v),t),o=b}})),Aa=t((function(e,n,r){var o,a,i=(a=function(e){var n=e.a,r=e.b,a=e.c;return f(sa,t((function(e,n,r){return P(e,n,r)})),l(ga,n,o),l(ga,r,o),l(ga,a,o))},l(Ut,a,(o=r).E)),c=u(qr,fa(n),L,i),d=s($a,n,i,0,L,St),m=s(za,n,d.b,i,0,P(d.a,L,d.c)),v=m.a,p=m.b,g=p.b?y(c,p):c;return u(ua,e,l(Pa,ha(g),v),l(La,g,v))})),Ra=r((function(e,n){return n.b?u(qr,Gn,n,e):e})),Fa=function(e){return u(qr,Ra,L,e)},Ba=function(e){switch(e.$){case 0:case 8:case 9:default:return la;case 1:case 2:return u(Aa,e.a,Wr,{E:l(Gr,(function(e){return P(3*e,3*e+1,3*e+2)}),l(br,0,vr(n=l(Gr,Vo,e.b))-1)),am:ha(Fa(l(Gr,(function(e){return N([e.a,e.b,e.c])}),n)))});case 3:return u(Aa,e.a,Wr,e.b);case 4:case 5:case 6:case 7:return u(Aa,e.a,(function(e){return e.bZ}),e.b)}var n}(ca),ka={$:0},Ea=ka,Va=function(e){return{$:4,a:e}},ja=r((function(e,n){for(;;){if(!e.b)return n;var r=e.a;e=e.b,n=l(Gn,r,n)}})),Ha=function(e){return Va(l(ja,e,L))},Ia=r((function(e,n){return{$:1,a:e,b:n}})),Wa={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"bH"}},Oa=r((function(e,n){switch(n.$){case 0:return l(jn,e,n);case 1:return l(Hn,e,n);case 2:return l(In,e,n);case 3:return l(Wn,e,n);case 4:return l(On,e,n);default:return l(Un,e,n)}})),Ua=r((function(e,n){switch(n.$){case 0:return l(Mn,e,n);case 1:return l(Pn,e,n);case 2:return l(yn,e,n);case 3:return l(Ln,e,n);case 4:return l(wn,e,n);case 5:return l(Dn,e,n);case 6:return l(Nn,e,n);case 7:return l(Sn,e,n);default:return(t=(r=e).sampleAlphaToCoverage).toggle=r.toggle,void(t.enabled||(r.gl.enable(r.gl.SAMPLE_ALPHA_TO_COVERAGE),t.enabled=!0))}var r,t})),Ya=Tn,qa=function(e){return{$:5,a:e}},Ga=qa(1029),Za=qa(1028),Xa=t((function(e,n,r){return 1===n?l(Gn,e?Ga:Za,r):r})),Ka={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = uv;\n        }\n    ",attributes:{position:"bZ",uv:"M"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Ja=o((function(e,n,r,t){return l(Ia,n,c((function(n,o,a,i,c,l,f,d){return s(Ya,u(Xa,i,t,d),Ka,Wa,r,{bH:e,b:a,c:o,d:l,e:n,f:c})})))})),Qa={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aD"}},ei={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{position:"bZ"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},ni=o((function(e,n,r,t){return l(Ia,n,c((function(n,o,a,i,c,l,f,d){return s(Ya,u(Xa,i,t,d),ei,Qa,r,{aD:e,b:a,c:o,d:l,e:n,f:c})})))})),ri=r((function(e,n){return{$:3,a:e,b:n}})),ti={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(constantColor, alpha);\n        }\n    ",attributes:{},uniforms:{constantColor:"aD",pointRadius:"bY",sceneProperties:"e"}},oi={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform lowp float pointRadius;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            float supersampling = sceneProperties[3][0];\n            gl_PointSize = 2.0 * pointRadius * supersampling + 2.0;\n        }\n    ",attributes:{position:"bZ"},uniforms:{modelMatrix:"b",modelScale:"c",pointRadius:"bY",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},ai=o((function(e,n,r,t){return l(ri,r,c((function(r,o,a,i,c,l,u,f){return s(Ya,f,oi,ti,t,{aD:e,b:a,c:o,bY:n,d:l,e:r,f:c})})))})),ii={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aO",sceneProperties:"e"}},ci=pn,li=a((function(e,n,r,t,o){return l(Ia,r,c((function(r,a,i,c,f,d,m,v){return s(Ya,u(Xa,c,o,v),ei,ii,t,{aO:l(ci,n,e),b:i,c:a,d:d,e:r,f:f})})))})),ui={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform lowp float pointRadius;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        float pointAlpha(float pointRadius, vec2 pointCoord) {\n            float pointSize = 2.0 * pointRadius;\n            float x = (pointSize + 2.0) * (pointCoord.s - 0.5);\n            float y = (pointSize + 2.0) * (pointCoord.t - 0.5);\n            float r = sqrt(x * x + y * y);\n            float innerRadius = pointRadius;\n            float outerRadius = pointRadius + 1.0;\n            if (r > outerRadius) {\n                return 0.0;\n            } else if (r > innerRadius) {\n                return outerRadius - r;\n            } else {\n                return 1.0;\n            }\n        }\n        \n        void main () {\n            vec4 color = toSrgb(emissiveColor, sceneProperties);\n            float supersampling = sceneProperties[3][0];\n            float alpha = pointAlpha(pointRadius * supersampling, gl_PointCoord);\n            gl_FragColor = vec4(color.rgb, alpha);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"aO",pointRadius:"bY",sceneProperties:"e"}},fi=a((function(e,n,r,t,o){return l(ri,t,c((function(t,a,i,c,u,f,d,m){return s(Ya,m,oi,ui,o,{aO:l(ci,n,e),b:i,c:a,bY:r,d:f,e:t,f:u})})))})),si={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"T",lights12:"bd",lights34:"bP",lights56:"bQ",lights78:"bR",materialColor:"co",sceneProperties:"e",viewMatrix:"f"}},di={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"bZ"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},mi=o((function(e,n,r,t){return l(Ia,n,c((function(n,o,a,i,c,l,f,d){var m=f.a,v=f.b;return s(Ya,u(Xa,i,t,d),di,si,r,{T:v,bd:m.bd,bP:m.bP,bQ:m.bQ,bR:m.bR,co:e,b:a,c:o,d:l,e:n,f:c})})))})),vi={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"T",lights12:"bd",lights34:"bP",lights56:"bQ",lights78:"bR",materialColorTexture:"cp",normalMapTexture:"aV",sceneProperties:"e",useNormalMap:"a_",viewMatrix:"f"}},pi={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        attribute highp vec3 tangent;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getWorldTangent(vec3 modelTangent, vec4 modelScale, mat4 modelMatrix) {\n            return (modelMatrix * vec4(safeNormalize(modelScale.xyz * modelTangent), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = getWorldTangent(tangent, modelScale, modelMatrix);\n        }\n    ",attributes:{normal:"p",position:"bZ",tangent:"d1",uv:"M"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},gi=i((function(e,n,r,t,o,a){return l(Ia,t,c((function(t,i,c,l,f,d,m,v){var p=m.a,g=m.b;return s(Ya,u(Xa,l,a,v),pi,vi,o,{T:g,bd:p.bd,bP:p.bP,bQ:p.bQ,bR:p.bR,cp:e,b:c,c:i,aV:n,d:d,e:t,a_:r,f:f})})))})),bi={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"b8",constantBaseColor:"ca",constantMetallic:"cb",constantRoughness:"cc",enabledLights:"T",lights12:"bd",lights34:"bP",lights56:"bQ",lights78:"bR",metallicTexture:"cs",normalMapTexture:"aV",roughnessTexture:"cM",sceneProperties:"e",useNormalMap:"a_",viewMatrix:"f"}},hi={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"ee",enabledLights:"T",lights12:"bd",lights34:"bP",lights56:"bQ",lights78:"bR",metallic:"cr",roughness:"eX",sceneProperties:"e",viewMatrix:"f"}},Ci=i((function(e,n,r,t,o,a){return l(Ia,t,c((function(t,i,c,l,f,d,m,v){var p=m.a,g=m.b;return s(Ya,u(Xa,l,a,v),di,hi,o,{ee:e,T:g,bd:p.bd,bP:p.bP,bQ:p.bQ,bR:p.bR,cr:r,b:c,c:i,d:d,eX:n,e:t,f:f})})))})),xi=r((function(e,n){return{$:1,a:e,b:n}})),Ti=r((function(e,n){return n.$?M(n.a.D,1):M(e,0)})),Mi=function(e){return e[0]},Pi=function(e){return e[1]},yi=function(e){return e[2]},Li=gn,wi=f(Li,0,0,0,0),Di=r((function(e,n){var r;return n.$?M(n.a.D,wi):M(e,f(Li,Mi(r=n.a),Pi(r),yi(r),1))})),Ni=r((function(e,n){var r,t=M(e,n);return t.a.$?l(xi,M(r=t.a.a.D,wi),l(Ti,r,n)):t.b.$?l(xi,l(Di,r=t.b.a.D,e),l(Ti,r,n)):{$:0,a:t.a.a}})),Si=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),_i=o((function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}})),zi=o((function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}})),$i=mn,Ai=l($i,0,0),Ri=r((function(e,n){return n.$?M(n.a.D,Ai):M(e,l($i,n.a,1))})),Fi=o((function(e,n,r,t){var o,a=f(zi,e,n,r,t);return a.a.$?f(_i,M(o=a.a.a.D,wi),l(Ri,o,n),l(Ri,o,r),l(Ti,o,t)):a.b.$?f(_i,l(Di,o=a.b.a.D,e),M(o,Ai),l(Ri,o,r),l(Ti,o,t)):a.c.$?f(_i,l(Di,o=a.c.a.D,e),l(Ri,o,n),M(o,Ai),l(Ti,o,t)):a.d.$?f(_i,l(Di,o=a.d.a.D,e),l(Ri,o,n),l(Ri,o,r),M(o,1)):u(Si,a.a.a,a.b.a,a.c.a)})),Bi={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"b6",colorTexture:"bH",sceneProperties:"e"}},ki=a((function(e,n,r,t,o){return l(Ia,r,c((function(r,a,i,c,l,f,d,m){return s(Ya,u(Xa,c,o,m),Ka,Bi,t,{b6:n,bH:e,b:i,c:a,d:f,e:r,f:l})})))})),Ei={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        attribute mediump vec2 uv;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main () {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = uv;\n            interpolatedTangent = vec3(0.0, 0.0, 0.0);\n        }\n    ",attributes:{normal:"p",position:"bZ",uv:"M"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",viewMatrix:"f"}},Vi=o((function(e,n,r,t){return l(Ia,n,c((function(n,o,a,i,c,l,f,d){var m=f.a,v=f.b;return s(Ya,u(Xa,i,t,d),Ei,vi,r,{T:v,bd:m.bd,bP:m.bP,bQ:m.bQ,bR:m.bR,cp:e,b:a,c:o,aV:e,d:l,e:n,a_:0,f:c})})))})),ji=n(9,ho=function(e,n,r,t,o,a,i,f,d){return l(Ia,i,c((function(i,c,l,m,v,p,g,b){var h=g.a,C=g.b;return s(Ya,u(Xa,m,d,b),Ei,bi,f,{b8:e,ca:n,cb:a,cc:t,T:C,bd:h.bd,bP:h.bP,bQ:h.bQ,bR:h.bR,cs:o,b:l,c:c,aV:e,d:p,cM:r,e:i,a_:0,f:v})})))},(function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return ho(e,n,r,t,o,a,i,c,l)}}}}}}}}})),Hi=t((function(e,n,r){return r>.5?n+(1-r)*(e-n):e+r*(n-e)})),Ii=function(e){var n;return u(ia,u(Hi,(n=e).dD,n.dA,.5),function(e){return u(Hi,e.dE,e.dB,.5)}(e),function(e){return u(Hi,e.dF,e.dC,.5)}(e))},Wi=function(e){return e.dC},Oi=function(e){return e.dF},Ui=r((function(e,n){return n-e})),Yi=function(e){return P(l(Ui,e.dD,function(e){return e.dA}(e)),l(Ui,function(e){return e.dE}(e),function(e){return e.dB}(e)),l(Ui,Oi(e),Wi(e)))},qi=function(e){var n=Yi(e),r=n.a,t=n.b,o=n.c;return{ei:Ii(e),eB:r/2,eC:t/2,eD:o/2}},Gi=r((function(e,n){switch(e.$){case 0:if(e.b.$){var r=e.b.a.D;switch(n.$){case 0:case 1:case 2:case 3:case 4:case 8:case 9:default:return Ea;case 5:case 6:case 7:return o=n.c,a=n.d,f(Ja,r,qi(F=n.a),o,a)}}else{var t=e.b.a;switch(n.$){case 0:return Ea;case 1:var o=n.c,a=n.d;return f(ni,t,qi(F=n.a),o,a);case 2:case 3:case 4:case 5:case 6:case 7:return o=n.c,a=n.d,f(ni,t,qi(F=n.a),o,a);case 8:case 9:return o=n.c,f(ni,t,qi(F=n.a),o,0);default:return o=n.d,f(ai,t,n.b,qi(F=n.a),o)}}case 1:if(e.b.$)switch(r=e.b.a.D,m=e.c,n.$){case 0:case 1:case 2:case 3:case 4:case 8:case 9:default:return Ea;case 5:case 6:case 7:return o=n.c,a=n.d,s(ki,r,m,qi(F=n.a),o,a)}else{var i=e.b.a,m=e.c;switch(n.$){case 0:return Ea;case 1:case 2:case 3:case 4:case 5:case 6:case 7:return o=n.c,a=n.d,s(li,i,m,qi(F=n.a),o,a);case 8:case 9:return o=n.c,s(li,i,m,qi(F=n.a),o,0);default:return o=n.d,s(fi,i,m,n.b,qi(F=n.a),o)}}case 2:var v=l(Ni,e.b,e.c);if(v.$){var p=v.a.a,g=v.b,b=g.a,h=g.b;switch(n.$){case 0:case 1:case 2:case 3:case 4:case 5:case 8:case 9:default:return Ea;case 6:return o=n.c,x=n.d,f(Vi,p,qi(F=n.a),o,x);case 7:return o=n.c,x=n.d,d(gi,p,b,h,qi(F=n.a),o,x)}}else{var C=v.a;switch(n.$){case 0:case 1:case 3:case 5:case 8:case 9:default:return Ea;case 2:o=n.c;var x=n.d;return f(mi,C,qi(F=n.a),o,x);case 4:case 6:case 7:return o=n.c,x=n.d,f(mi,C,qi(F=n.a),o,x)}}default:var T=f(Fi,e.b,e.c,e.d,e.e);if(T.$){var M=T.a,P=M.a,y=M.b,L=T.b,w=L.a,D=L.b,N=T.c,S=N.a,_=N.b,z=T.d;switch(b=z.a,h=z.b,n.$){case 0:case 1:case 2:case 3:case 4:case 5:case 8:case 9:default:return Ea;case 6:return o=n.c,a=n.d,function(e,n,r,t,o,a,i,c,l,u){return 9===e.a?e.f(n,r,t,o,a,i,c,l,u):e(n)(r)(t)(o)(a)(i)(c)(l)(u)}(ji,P,y,w,D,S,_,qi(F=n.a),o,a);case 7:return F=n.a,o=n.c,a=n.d,function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(f){return function(d){return function(m){return function(v){return l(Ia,d,c((function(c,l,d,p,g,b,h,C){var x=h.a,T=h.b;return s(Ya,u(Xa,p,v,C),pi,bi,m,{b8:e,ca:n,cb:a,cc:t,T:T,bd:x.bd,bP:x.bP,bQ:x.bQ,bR:x.bR,cs:o,b:d,c:l,aV:i,d:b,cM:r,e:c,a_:f,f:g})})))}}}}}}}}}}}(P)(y)(w)(D)(S)(_)(b)(h)(qi(F))(o)(a)}}else{var $=T.a,A=T.b,R=T.c;switch(n.$){case 0:case 1:case 3:case 5:case 8:case 9:default:return Ea;case 2:case 4:case 6:return o=n.c,a=n.d,d(Ci,$,A,R,qi(F=n.a),o,a);case 7:var F;return o=n.c,a=n.d,d(Ci,$,A,R,qi(F=n.a),o,a)}}}})),Zi=function(e){return e.d6},Xi=function(e){return e.d7},Ki=function(e){return e.b5},Ji=function(e){var n=e,r=Ki(n.cX),t=Xi(n.cX),o=Zi(n.cX),a=Ki(n.cW),i=Xi(n.cW),c=Zi(n.cW),l=Ki(n.cV),u=Xi(n.cV),f=Zi(n.cV);return f*i*r+u*a*o+l*c*t-l*i*o-u*c*r-f*a*t>0},Qi=function(e){return e.cw},ec=function(e){return e.cV},nc=function(e){return e.cW},rc=function(e){return e.cX},tc=r((function(e,n){return{$:5,a:e,b:n}})),oc=r((function(e,n){return{da:h(e.da,n.da),r:e.r*n.r+e.s*n.u+e.t*n.x,s:e.r*n.s+e.s*n.v+e.t*n.y,t:e.r*n.t+e.s*n.w+e.t*n.z,u:e.u*n.r+e.v*n.u+e.w*n.x,v:e.u*n.s+e.v*n.v+e.w*n.y,w:e.u*n.t+e.v*n.w+e.w*n.z,x:e.x*n.r+e.y*n.u+e.z*n.x,y:e.x*n.s+e.y*n.v+e.z*n.y,z:e.x*n.t+e.y*n.w+e.z*n.z,I:n.I+(e.I*n.r+e.J*n.u+e.K*n.x)*n.b2,J:n.J+(e.I*n.s+e.J*n.v+e.K*n.y)*n.b2,K:n.K+(e.I*n.t+e.J*n.w+e.K*n.z)*n.b2,b2:e.b2*n.b2}})),ac=r((function(e,n){var r=n;switch(r.$){case 0:return Ea;case 5:var t=r.b;return l(tc,l(oc,r.a,e),t);default:return l(tc,e,r)}})),ic=r((function(e,n){return l(ac,function(e){var n=Qi(e),r=rc(e),t=nc(e),o=ec(e);return{da:Ji(e),r:o.d6,s:o.d7,t:o.b5,u:t.d6,v:t.d7,w:t.b5,x:r.d6,y:r.d7,z:r.b5,I:n.d6,J:n.d7,K:n.b5,b2:1}}(e),n)})),cc=function(e){return{$:2,a:e}},lc=r((function(e,n){var r=e.a,t=e.b,o=e.c,a=n.ei;return{ei:{d6:r*a.d6,d7:t*a.d7,b5:o*a.b5},eB:r*n.eB,eC:t*n.eC,eD:o*n.eD}})),uc=function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){var f,s,d={d6:(s=t)[0],d7:s[1],b5:s[2],d5:s[3]},v=(f={d5:d.d5,d6:d.d6*e.a,d7:d.d7*e.b,b5:d.b5*e.c},new Float64Array([f.d6,f.d7,f.b5,f.d5]));return m(n,r,v,o,a,i,c,l,u)}}}}}}}}}},fc=r((function(e,n){switch(n.$){case 0:return ka;case 5:return l(tc,n.a,l(fc,e,n.b));case 1:var r=n.b;return l(Ia,l(lc,e,n.a),l(uc,e,r));case 3:return n;case 2:return cc(l(uc,e,r=n.a));default:var t=n.a;return Va(l(Gr,fc(e),t))}})),sc=r((function(e,n){return l(fc,e,n)})),dc={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},mc=519,vc=7680,pc=function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return function(f){return{$:2,a:e,b:n,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u,k:f}}}}}}}}}}}},gc=t((function(e,n,r){return n(e(r))})),bc=t((function(e,n,t){var o=e.cJ,a=e.cn,i=e.cU,c=r((function(e,n){return n(e)})),f=r((function(e,n){return n(e)})),s=function(e){return l(gc,c(e.bp),l(gc,f(e.a8),l(gc,f(e.by),f(e.bz))))};return l(s,t,l(s,n,u(pc,o,a,i)))})),hc=u(bc,{cn:0,cJ:0,cU:15},{a8:vc,bp:mc,by:vc,bz:7683},{a8:vc,bp:mc,by:vc,bz:7682}),Cc=u(bc,{cn:0,cJ:0,cU:15},{a8:vc,bp:mc,by:vc,bz:7682},{a8:vc,bp:mc,by:vc,bz:7683}),xc=r((function(e,n){return l(Gn,e?Cc:hc,n)})),Tc={src:"\n        precision highp float;\n        \n        attribute highp vec3 position;\n        attribute highp vec3 normal;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{normal:"p",position:"bZ"},uniforms:{modelMatrix:"b",modelScale:"c",projectionMatrix:"d",sceneProperties:"e",shadowLight:"b3",viewMatrix:"f"}},Mc=function(e){var n=function(e){if(e.$){var n=e.c;return ur(c((function(e,r,t,o,a,i,c,u){return s(Ya,l(xc,o,u),Tc,dc,n,{b:t,c:r,d:i,e:e,b3:c,f:a})})))}return fr}(e);return n.$?Ea:cc(n.a)},Pc=o((function(e,n,r,t){var o,a=l(Gi,r,ca),i=(o=M(e,n)).a?o.b?Ha(N([a,Mc(Ba)])):a:o.b?Mc(Ba):Ea,c=function(e){return e.en}(t),u=c.a,f=c.b,s=c.c;return l(ic,function(e){return e.ec}(t),l(sc,P(u,f,s),i))})),yc=r((function(e,n){return f(Pc,!0,!1,e,n)})),Lc=3.141592653589793,wc=function(e){return Lc*(e/180)},Dc=r((function(e,n){return{$:0,a:e,b:n}})),Nc=function(e){var n=e.b;return l(Dc,1664525*e.a+n>>>0,n)},Sc=function(e){var n=e.a,r=277803737*(n^n>>>4+(n>>>28));return(r>>>22^r)>>>0},_c=r((function(e,n){return function(r){var t=Nc(r),o=Zo(n-e),a=Sc(t);return M((1*(67108863&Sc(r))*134217728+1*(134217727&a))/9007199254740992*o+e,Nc(t))}})),zc=function(e){return{$:0,a:e}},$c=a((function(e,n,r,t,o){return{$:3,a:e,b:n,c:r,d:t,e:o}})),Ac=t((function(e,n,r){return 0>x(r,e)?e:x(r,n)>0?n:r})),Rc=z,Fc=function(e){return u(Ac,0,1,e>.04045?l(Rc,(e+.055)/1.055,2.4):e/12.92)},Bc=o((function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}})),kc=function(e){return e/255},Ec=t((function(e,n,r){return f(Bc,kc(e),kc(n),kc(r),1)})),Vc=$,jc=A,Hc=r((function(e,n){var r=n,t=function(e){return e.cw}(e),o=.5*r,a=Vc(o),i=jc(o),c=function(e){return e.eo}(e),l=c.d6*i,u=a*l,f=l*l,s=c.d7*i,d=a*s,m=l*s,v=s*s,p=1-2*(f+v),g=c.b5*i,b=a*g,h=2*(m-b),C=2*(m+b),x=l*g,T=2*(x+d),M=2*(x-d),P=s*g,y=2*(P-u),L=2*(P+u),w=g*g,D=1-2*(v+w),N=1-2*(f+w);return{da:!0,r:D,s:C,t:M,u:h,v:N,w:L,x:T,y:y,z:p,I:t.d6-D*t.d6-h*t.d7-T*t.b5,J:t.d7-C*t.d6-N*t.d7-y*t.b5,K:t.b5-M*t.d6-L*t.d7-p*t.b5,b2:1}})),Ic=t((function(e,n,r){return l(ac,l(Hc,e,n),r)})),Wc=t((function(e,n,r){return u(Ic,e,n,r)})),Oc=r((function(e,n){return e(n)})),Uc=r((function(e,n){return{eo:n,cw:e}})),Yc=function(e){return M(1,e)},qc=t((function(e,n,r){for(;;){var t=e.a,o=e.b;if(!n.b)return o;var a=n.a,i=n.b;if(1>x(r,Zo(t)))return o;e=a,n=i,r-=Zo(t)}})),Gc=r((function(e,n){var r=n;return function(n){var t=r(n),o=t.b;return M(e(t.a),o)}})),Zc=r((function(e,n){var r=function(e){return Zo(e.a)},t=r(e)+u(mr,lr,0,l(Gr,r,n));return l(Gc,l(qc,e,n),l(_c,0,t))})),Xc=r((function(e,n){return l(Zc,Yc(e),l(Gr,Yc,n))})),Kc=function(e){return Zo(e)},Jc=r((function(e,n){return x(n,e)>-1})),Qc=r((function(e,n){return e+.5*(n-e)})),el={d6:-1,d7:0,b5:0},nl={d6:0,d7:-1,b5:0},rl={d6:0,d7:0,b5:-1},tl={d6:1,d7:0,b5:0},ol={d6:0,d7:1,b5:0},al={d6:0,d7:0,b5:1},il=i((function(e,n,r,t,o,a){var i=l(Jc,r,a)?al:rl,c=l(Jc,n,o)?ol:nl,f=l(Jc,e,t)?tl:el,s=P(Kc(l(Ui,e,t)),Kc(l(Ui,n,o)),Kc(l(Ui,r,a)));return{ec:{cw:u(ia,l(Qc,e,t),l(Qc,n,o),l(Qc,r,a)),cV:f,cW:c,cX:i},en:s}})),cl=function(e){var n=e;return{d6:0,d7:Vc(n),b5:jc(n)}},ll=function(e){var n=e;return{d6:0,d7:jc(n),b5:Vc(n)}},ul=o((function(e,n,r,t){var o,a,i,c,f,m,v,p=l(yc,(o={ee:u(Ec,91,192,235),eX:.6},m=(a={ee:o.ee,cr:0,eX:o.eX}).eX,v=a.cr,s($c,0,zc((i=function(e){return{aL:e.d,b9:e.c,cd:e.b,cI:e.a}}(a.ee),c=i.cd,f=i.b9,u(Na,Fc(i.cI),Fc(c),Fc(f)))),zc(u(Ac,0,1,m)),zc(u(Ac,0,1,v)),zc(0))),function(e){return d(il,e.fc,e.ff,e.fi,e.fd,e.fg,e.fj)}({fc:e+r,fd:e+r+.6,ff:e+t,fg:e+t+.6,fi:0,fj:.6})),g=function(e){return wc(e+n/500)},b=l(Oc,l(yo,(function(e){return l(Xc,function(e){var n=e;return{d6:Vc(n),d7:jc(n),b5:0}}(g(e)),N([cl(g(e)),ll(g(e))]))}),l(_c,0,1e4)),function(e){var n=Nc(l(Dc,0,1013904223));return Nc(l(Dc,n.a+e>>>0,n.b))}(r+1e3*t)).a;return u(Wc,l(Uc,u(ia,r+.3+e,t+.3+e,.3),b),wc(n/150+r/3+t/3),p)})),fl=r((function(e,n){return Fa(l(Gr,e,n))})),sl=_e("div"),dl=function(e){return l(Ae,"height",sr(e))},ml=function(e){var n=e,r=l(zr,Zo(n.d6),l(zr,Zo(n.d7),Zo(n.b5)));if(r){var t=n.b5/r,o=n.d7/r,a=n.d6/r,i=Xo(a*a+o*o+t*t);return ur({d6:a/i,d7:o/i,b5:t/i})}return fr},vl=r((function(e,n){return n.$?fr:e(n.a)})),pl=r((function(e,n){return n.d6*e.d6+n.d7*e.d7+n.b5*e.b5})),gl=r((function(e,n){return x(n,e)>0})),bl=r((function(e,n){return 0>x(n,e)})),hl=r((function(e,n){return n.$?fr:ur(e(n.a))})),Cl=r((function(e,n){return{d6:n.d6-e.d6,d7:n.d7-e.d7,b5:n.b5-e.b5}})),xl=r((function(e,n){var r=n.d6*e.d6+n.d7*e.d7+n.b5*e.b5;return{d6:e.d6*r,d7:e.d7*r,b5:e.b5*r}})),Tl=t((function(e,n,r){return l(vl,(function(t){return l(vl,(function(o){var a,i=l(qo,n,e),c=l(pl,r,i),u=l(gl,0,c)?i:l(bl,0,c)?{d6:-(a=i).d6,d7:-a.d7,b5:-a.b5}:Ko;return l(hl,(function(e){return P(t,o,e)}),ml(u))}),ml(l(Cl,l(xl,t,n),n)))}),ml(e))})),Ml=function(e){var n=function(e){var n=e,r=Zo(n.b5),t=Zo(n.d7),o=Zo(n.d6);if(1>x(o,t)){if(1>x(o,r)){var a=Xo(n.b5*n.b5+n.d7*n.d7);return{d6:0,d7:-n.b5/a,b5:n.d7/a}}return a=Xo(n.d7*n.d7+n.d6*n.d6),{d6:-n.d7/a,d7:n.d6/a,b5:0}}return 1>x(t,r)?(a=Xo(n.b5*n.b5+n.d6*n.d6),{d6:n.b5/a,d7:0,b5:-n.d6/a}):(a=Xo(n.d6*n.d6+n.d7*n.d7),{d6:-n.d7/a,d7:n.d6/a,b5:0})}(e);return M(n,{d6:e.d7*n.b5-e.b5*n.d7,d7:e.b5*n.d6-e.d6*n.b5,b5:e.d6*n.d7-e.d7*n.d6})},Pl=r((function(e,n){var r=Ml(e);return{cw:n,cV:r.a,cW:r.b,cX:e}})),yl=function(e){var n=l(Go,e.eA,e.ex),r=e.d4,t=u(Tl,n,r,l(qo,n,r));if(t.$){var o=ml(n);if(o.$){var a=Ml(e.d4);return{cw:e.ex,cV:a.b,cW:e.d4,cX:a.a}}return l(Pl,o.a,e.ex)}var i=t.a;return{cw:e.ex,cV:i.c,cW:i.b,cX:i.a}},Ll=t((function(e,n,r){return{d6:e,d7:n,b5:r}})),wl=function(e){return.5*e},Dl=R,Nl=$e,Sl=function(e){return{$:0,a:e}},_l={$:3},zl=o((function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}})),$l=function(e){return ze(function(e){return"script"==e?"p":e}(e))},Al=function(e){return{$:2,a:e}},Rl=H,Fl=t((function(e,n,r){return u(Vn,e,n,r)})),Bl=f(Li,1,1,1,1),kl=t((function(e,n,r){return l(Gr,(function(e){return l(e,n,r)}),e)})),El=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),Vl=r((function(e,n){var r=n.d6,t=n.d7;return u(El,e*r/t,e,e*(1-r-t)/t)})),jl=r((function(e,n){var r,t,o,a;return u(Na,3.2406*(t=(r=l(Vl,e,n)).a)-1.5372*(o=r.b)-.4986*(a=r.c),-.9689*t+1.8758*o+.0415*a,.0557*t-.204*o+1.057*a)})),Hl=function(e){var n=new Float64Array(16);return n[0]=e.dj,n[1]=e.dn,n[2]=e.dr,n[3]=e.dv,n[4]=e.dk,n[5]=e.$7,n[6]=e.ds,n[7]=e.dw,n[8]=e.dl,n[9]=e.dp,n[10]=e.dt,n[11]=e.dx,n[12]=e.dm,n[13]=e.dq,n[14]=e.du,n[15]=e.dy,n},Il=a((function(e,n,r,t,o){return d(o,e,f(Li,t.b2,t.b2,t.b2,t.da?1:-1),function(e){return Hl({dj:e.r,dk:e.u,dl:e.x,dm:e.I,dn:e.s,$7:e.v,dp:e.y,dq:e.J,dr:e.t,ds:e.w,dt:e.z,du:e.K,dv:0,dw:0,dx:0,dy:1})}(t),t.da,n,r)})),Wl=i((function(e,n,r,t,o,a){e:for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;t=l(oc,o.a,t),o=i;continue e;case 1:return{O:l(Gn,s(Il,e,n,r,t,o.b),a.O),Z:a.Z,eY:a.eY};case 3:return{O:a.O,Z:l(Gn,s(Il,e,n,r,t,o.b),a.Z),eY:a.eY};case 2:return{O:a.O,Z:a.Z,eY:l(Gn,s(Il,e,n,r,t,o.a),a.eY)};default:var c=o.a;return u(mr,f(Wl,e,n,r,t),a,c)}})),Ol=o((function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}})),Ul=o((function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}})),Yl=r((function(e,n){return{$:6,a:e,b:n}})),ql=N([f(Ul,518,!1,0,1),f(Ol,!1,!1,!1,!1),l(Yl,0,1)]),Gl=7681,Zl={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Xl=r((function(e,n){return{$:0,a:e,b:n}}))({c1:1,c9:0,dH:5})(N([{bZ:l($i,-1,-1)},{bZ:l($i,1,-1)},{bZ:l($i,-1,1)},{bZ:l($i,1,1)}])),Kl={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"bZ"},uniforms:{}},Jl=function(e){return u(bc,{cn:e.cn,cJ:e.cJ,cU:e.cU},{a8:e.a8,bp:e.bp,by:e.by,bz:e.bz},{a8:e.a8,bp:e.bp,by:e.by,bz:e.bz})},Ql=function(e){return s(Ya,N([Jl(e),f(Ol,!1,!1,!1,!1)]),Kl,Zl,Xl,{})},eu=Ql({a8:Gl,cn:0,cJ:8,bp:mc,cU:15,by:Gl,bz:Gl}),nu=function(e){var n;return Ql({a8:vc,cn:15,cJ:8,bp:516,cU:(n=e,l(Rc,2,n+4)),by:5386,bz:5386})},ru=t((function(e,n,r){return Fa(N([u(kl,e,r,ql),N([nu(n),eu])]))})),tu=r((function(e,n){return Fa(l(hr,ru(e),n))})),ou=f(Ul,513,!0,0,1),au=t((function(e,n,r){return{$:0,a:e,b:n,c:r}})),iu=r((function(e,n){return u(au,32774,e,n)})),cu=(uo={bA:0,aL:l(iu,1,771),bD:0,bG:l(iu,770,771),bK:0,b$:0},fo=uo.b$,so=uo.bK,mo=uo.bD,vo=uo.bA,po=uo.bG,go=uo.aL,bo=r((function(e,n){var r=e.b,t=e.c,o=n.a,a=n.b,i=n.c;return function(e){return function(n){return function(r){return function(t){return function(o){return function(a){return function(i){return function(c){return function(l){return function(u){return{$:0,a:e,b:n,c:r,d:t,e:o,f:a,g:i,h:c,i:l,j:u}}}}}}}}}}}(e.a)(r)(t)(o)(a)(i)(fo)(so)(mo)(vo)})),l(bo,po,go)),lu=N([ou,cu]),uu=function(e){return Qi(e)},fu=function(e){return{cw:{d6:e.I,d7:e.J,b5:e.K},cV:{d6:e.r,d7:e.s,b5:e.t},cW:{d6:e.u,d7:e.v,b5:e.w},cX:{d6:e.x,d7:e.y,b5:e.z}}},su=r((function(e,n){var r=e.cX,t=e.cW,o=e.cV;return{d6:n.d6*o.d6+n.d7*o.d7+n.b5*o.b5,d7:n.d6*t.d6+n.d7*t.d7+n.b5*t.b5,b5:n.d6*r.d6+n.d7*r.d7+n.b5*r.b5}})),du=r((function(e,n){var r=e.cw,t=n.d6-r.d6,o=n.d7-r.d7,a=n.b5-r.b5,i=e.cX,c=e.cW,l=e.cV;return{d6:t*l.d6+o*l.d7+a*l.b5,d7:t*c.d6+o*c.d7+a*c.b5,b5:t*i.d6+o*i.d7+a*i.b5}})),mu=r((function(e,n){return{cw:l(du,e,Qi(n)),cV:l(su,e,ec(n)),cW:l(su,e,nc(n)),cX:l(su,e,rc(n))}})),vu=r((function(e,n){var r=n,t=e;return{dA:l(Ao,t.dA,r.dA),dB:l(Ao,t.dB,r.dB),dC:l(Ao,t.dC,r.dC),dD:l(Fo,t.dD,r.dD),dE:l(Fo,t.dE,r.dE),dF:l(Fo,t.dF,r.dF)}})),pu=r((function(e,n){return n+e})),gu=r((function(e,n){var r=e.a,t=e.c,o=wl(Kc(e.b)),a=wl(Kc(r)),i=wl(Kc(t)),c=function(e){return P(e.d6,e.d7,e.b5)}(n),u=c.a,f=c.b,s=c.c;return{dA:l(pu,a,u),dB:l(pu,o,f),dC:l(pu,i,s),dD:l(Ui,a,u),dE:l(Ui,o,f),dF:l(Ui,i,s)}})),bu=o((function(e,n,r,t){var o=r.ei,a=2*r.eD*n,i=2*r.eC*n,c=2*r.eB*n,f=o.b5*n,s=o.d7*n,d=o.d6*n,m=rc(e),v=Zo(c*m.d6)+Zo(i*m.d7)+Zo(a*m.b5),p=nc(e),g=Zo(c*p.d6)+Zo(i*p.d7)+Zo(a*p.b5),b=ec(e),h=Zo(c*b.d6)+Zo(i*b.d7)+Zo(a*b.b5),C=l(gu,P(h,g,v),l(du,e,u(Ll,d,s,f)));return ur(t.$?C:l(vu,t.a,C))})),hu=o((function(e,n,r,t){e:for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:case 2:e=c=e,n=u=n,r=s=r,t=a;continue e;case 1:var i=f(bu,e,n,o.a,r);e=c=e,n=u=n,r=s=i,t=a;continue e;case 3:i=f(bu,e,n,o.a,r),e=c=e,n=u=n,r=s=i,t=a;continue e;case 4:c=e,u=n,s=f(hu,e,n,r,o.a),e=c,n=u,r=s,t=a;continue e;default:var c,u,s,d=o.a,m=o.b,v=l(mu,fu(d),e),p=n*d.b2;e=c=e,n=u=n,r=s=f(hu,v,p,r,N([m])),t=a;continue e}}})),Cu={da:!0,r:1,s:0,t:0,u:0,v:1,w:0,x:0,y:0,z:1,I:0,J:0,K:0,b2:1},xu=Ql({a8:Gl,cn:0,cJ:8,bp:mc,cU:255,by:Gl,bz:Gl}),Tu={bD:0,eh:!1,bK:0,cF:0,b$:0,cR:0,d6:0,d7:0,b5:0},Mu=r((function(e,n){return Hl({dj:e.d6,dk:e.b$,dl:n.d6,dm:n.b$,dn:e.d7,$7:e.bK,dp:n.d7,dq:n.bK,dr:e.b5,ds:e.bD,dt:n.b5,du:n.bD,dv:e.cR,dw:e.cF,dx:n.cR,dy:n.cF})})),Pu=M({bd:l(Mu,Tu,Tu),bP:l(Mu,Tu,Tu),bQ:l(Mu,Tu,Tu),bR:l(Mu,Tu,Tu)},f(Li,0,0,0,0)),yu=function(e){return-e},Lu=function(e){return f(Ul,515,e.ad,e.aa,e._)},wu=N([Lu({_:1,aa:0,ad:!0}),Jl({a8:vc,cn:240,cJ:0,bp:514,cU:0,by:vc,bz:vc}),cu]),Du=function(e){return e===1/0||e===-1/0},Nu=r((function(e,n){var r=e,t=n.ez,o=n.eb,a=Kc(n.eP),i=Kc(t),c=r.cH;if(c.$){var l=c.a;return Du(i)?Hl({dj:2/(o*l),dk:0,dl:0,dm:0,dn:0,$7:2/l,dp:0,dq:0,dr:0,ds:0,dt:0,du:-1,dv:0,dw:0,dx:0,dy:1}):Hl({dj:2/(o*l),dk:0,dl:0,dm:0,dn:0,$7:2/l,dp:0,dq:0,dr:0,ds:0,dt:-2/(i-a),du:-(i+a)/(i-a),dv:0,dw:0,dx:0,dy:1})}var u=c.a;return Du(i)?Hl({dj:1/(o*u),dk:0,dl:0,dm:0,dn:0,$7:1/u,dp:0,dq:0,dr:0,ds:0,dt:-1,du:-2*a,dv:0,dw:0,dx:-1,dy:0}):Hl({dj:1/(o*u),dk:0,dl:0,dm:0,dn:0,$7:1/u,dp:0,dq:0,dr:0,ds:0,dt:-(i+a)/(i-a),du:-2*i*a/(i-a),dv:0,dw:0,dx:-1,dy:0})})),Su=r((function(e,n){return 1==(1&e>>n)?0:1})),_u=t((function(e,n,r){return Fa(l(Gr,(function(r){var t=r<<4;return u(kl,e,M(n,f(Li,l(Su,r,0),l(Su,r,1),l(Su,r,2),l(Su,r,3))),function(e){return N([Lu({_:1,aa:0,ad:!0}),Jl({a8:vc,cn:240,cJ:e,bp:514,cU:0,by:vc,bz:vc}),cu])}(t))}),l(br,1,l(Rc,2,r)-1)))})),zu=function(e){return{d6:-e.d6,d7:-e.d7,b5:-e.b5}},$u=function(e){return zu(rc(e))},Au={cw:{d6:0,d7:0,b5:0},cV:tl,cW:ol,cX:al},Ru=r((function(e,n){var r,t,o,a,i;return t=Qi(r=l(mu,n,e)),o=rc(r),a=nc(r),i=ec(r),Hl({dj:i.d6,dk:a.d6,dl:o.d6,dm:t.d6,dn:i.d7,$7:a.d7,dp:o.d7,dq:t.d7,dr:i.b5,ds:a.b5,dt:o.b5,du:t.b5,dv:0,dw:0,dx:0,dy:1})})),Fu=function(e){return ec(e)},Bu=t((function(e,n,r){return{d6:e,d7:n,b5:r}})),ku=function(e){return nc(e)},Eu=function(e){return l(Ae,"width",sr(e))},Vu=r((function(e,n){var r,t,o,a,i,c,s,m=N([(1,{$:1,a:1}),Al(0),Sl(!0),f(zl,0,0,0,0)]),v=function(){var n=e.aM;switch(n.$){case 0:return P(m,"0",1);case 1:return P(l(Gn,_l,m),"1",1);default:return P(m,"0",n.a)}}(),p=v.a,g=v.b,b=v.c,h=e.en,C=h.a,x=h.b,T=l(Nl,"height",sr(x)+"px"),y=C,w=y/x,D=l(fl,(function(n){return function(e){var n=function(e){return e.e7}(e.eg),r={cw:uu(n),cV:Fu(n),cW:ku(n),cX:zu($u(n))},t=Ha(e.et),o=f(hu,r,1,fr,N([t]));if(1===o.$)return L;var a,i=o.a,c=l(Ru,Au,n),s=l(aa,.99,l(Ao,Kc(e.ek),yu(Wi(i)))),m=Yi(i),v=function(e){var n=e,r=l(zr,Zo(n.d6),l(zr,Zo(n.d7),Zo(n.b5)));if(r){var t=n.b5/r,o=n.d7/r,a=n.d6/r;return Xo(a*a+o*o+t*t)*r}return 0}(u(Bu,m.a,m.b,m.c)),p=l(aa,1.01,l(pu,v,yu(Oi(i)))),g=l(Nu,e.eg,{eb:e.eb,ez:p,eP:s}),b=(a=g,{dj:a[0],dn:a[1],dr:a[2],dv:a[3],dk:a[4],$7:a[5],ds:a[6],dw:a[7],dl:a[8],dp:a[9],dt:a[10],dx:a[11],dm:a[12],dq:a[13],du:a[14],dy:a[15]}).dy,h=b?zu($u(n)):uu(n),C=function(){var n=e.aw;switch(n.$){case 0:return M(0,0);case 1:return M(1,0);case 2:return M(2,0);case 3:return M(3,n.a);case 4:return M(4,n.a);default:return M(5,0)}}(),x=C.a,T=C.b,P=l(jl,e.ap,e.az),y=Hl({dj:0,dk:h.d6,dl:Mi(P),dm:e.d$,dn:0,$7:h.d7,dp:Pi(P),dq:v,dr:0,ds:h.b5,dt:yi(P),du:x,dv:0,dw:b,dx:0,dy:T}),w=d(Wl,y,c,g,Cu,t,{O:L,Z:L,eY:L}),D=e.ar;switch(D.$){case 0:return Fa(N([u(kl,w.O,M(S=D.a,Bl),lu),u(kl,w.Z,Pu,lu)]));case 1:var S=D.a;return Fa(N([u(kl,w.O,Pu,lu),N([xu]),u(kl,w.eY,S.bd,ql),N([nu(0)]),u(kl,w.O,M(S,Bl),wu),u(kl,w.Z,Pu,lu)]));default:var _=D.a,z=D.b;return Fa(N([u(kl,w.O,M(z,Bl),lu),N([xu]),l(tu,w.eY,_),u(_u,w.O,z,vr(_)),u(kl,w.Z,Pu,lu)]))}}({eb:w,eg:e.eg,ek:e.ek,et:n.et,ap:n.ap,ar:n.ar,d$:b,aw:n.aw,az:n.az})}),n),S=l(Nl,"width",sr(y)+"px"),_=(r=e.ed,a=r.b,i=r.c,c=r.d,s=function(e){return ut(1e4*e)/100},t=N(["rgba(",Rl(s(r.a)),"%,",Rl(s(a)),"%,",Rl(s(i)),"%,",Rl((o=c,ut(1e3*o)/1e3)),")"]),l(dr,"",t));return u($l,"div",N([l(Nl,"padding","0px"),S,T]),N([M(g,u(Fl,p,N([Eu(ut(y*b)),dl(ut(x*b)),S,T,l(Nl,"display","block"),l(Nl,"background-color",_)]),D))]))})),ju={d6:.31271,d7:.32902},Hu=r((function(e,n){var r=e,t=n.eo,o=t.d6,a=t.d7,i=t.b5,c=l(jl,n.ce,n.bF);return{bD:yi(c),eh:r,bK:Pi(c),cF:0,b$:Mi(c),cR:1,d6:-o,d7:-a,b5:-i}})),Iu={$:1},Wu={$:0},Ou=function(e){return function(e){for(;;){if(h(e.eJ,0)&&h(e.eK,0))return Tu;if(!l(gl,Kc(e.eJ),Kc(e.eK))){var n=Zo(e.eK/Lc),r=Zo(e.eJ/Lc),t=e.d4,o=t.d6,a=t.d7,i=t.b5,c=l(jl,1,e.bF);return{bD:r*yi(c),eh:!1,bK:r*Pi(c),cF:n/r,b$:r*Mi(c),cR:3,d6:o,d7:a,b5:i}}e={bF:e.bF,eJ:e.eK,eK:e.eJ,d4:zu(e.d4)}}}({bF:e.bF,eJ:e.ce,eK:0,d4:e.d4})},Uu=function(e){var n=u(Ac,1667,25e3,e),r=n>4e3?-3025846900/(n*n*n)+2107037.9/(n*n)+.2226347*1e3/n+.24039:-266123900.00000003/(n*n*n)-.2343589*1e6/(n*n)+877.6956/n+.17991;return{d6:r,d7:n>2222?n>4e3?r*r*r*3.081758-r*r*5.8733867+3.75112997*r-.37001483:r*r*r*-.9549476-r*r*1.37418593+2.09137015*r-.16748867:r*r*r*-1.1063814-r*r*1.3481102+2.18555832*r-.20219683}},Yu=Uu(12e3),qu=Uu(5600),Gu=r((function(e,n){return{$:2,a:e,b:n}})),Zu=function(e){return{$:0,a:e}},Xu=function(e){return e.eh},Ku=Zu(Pu.a),Ju=r((function(e,n){var t=r((function(n,r){var t=r.a,o=r.b;return e(n)?M(l(Gn,n,t),o):M(t,l(Gn,n,o))}));return u(qr,t,M(L,L),n)})),Qu=function(e){return Hl({dj:e.d6,dk:e.b$,dl:0,dm:0,dn:e.d7,$7:e.bK,dp:0,dq:0,dr:e.b5,ds:e.bD,dt:0,du:0,dv:e.cR,dw:e.cF,dx:0,dy:0})},ef=c((function(e,n,r,t,o,a,i,c){var u=l(Ju,Xu,N([e,n,r,t])),f=u.a;if(f.b){var s=y(f,u.b);if(s.b&&s.b.b&&s.b.b.b&&s.b.b.b.b&&!s.b.b.b.b.b){var d=s.a,m=s.b,v=m.a,p=m.b,g=p.a,b=p.b.a;return l(Gu,l(Gr,Qu,f),{bd:l(Mu,d,v),bP:l(Mu,g,b),bQ:l(Mu,o,a),bR:l(Mu,i,c)})}return Ku}return Zu({bd:l(Mu,e,n),bP:l(Mu,r,t),bQ:l(Mu,o,a),bR:l(Mu,i,c)})})),nf=t((function(e,n,r){return m(ef,e,n,r,Tu,Tu,Tu,Tu,Tu)})),rf=function(e){var n=l(Hu,e.eY,{bF:qu,eo:e.e1,ce:8e4}),r=Ou({bF:Yu,ce:2e4,d4:e.d4}),t=Ou({bF:ju,ce:15e3,d4:zu(e.d4)}),o=u(nf,n,r,t);return function(e){return l(Vu,{aM:e.aM,ed:e.ed,eg:e.eg,ek:e.ek,en:e.en},N([{et:e.et,ap:e.ap,ar:e.ar,aw:e.aw,az:e.az}]))}({aM:Iu,ed:e.ed,eg:e.eg,ek:e.ek,en:e.en,et:e.et,ap:1.2*l(Rc,2,15),ar:o,aw:Wu,az:ju})},tf=f(o((function(e,n,r,t){return f(Bc,e,n,r,t)})),0,0,0,0);lo={Main:{init:ct({eI:function(){return ft},e0:function(){var e,n;return Vr(N([(n=er,u(xo,1,"resize",l(yt,"target",u(Hr,n,l(yt,"innerWidth",Lt),l(yt,"innerHeight",Lt))))),(e=nr,Pt(st(e)))]))},e3:Po,e6:function(e){var n,r,t;return l(sl,N([Eu(e.bk),dl(e.bl),l(Nl,"background-color","rgb(33, 26, 64)")]),N([rf({ed:tf,eg:(n={e5:wc(35),e7:yl({ex:u(Ll,0,0,85),eA:u(Ll,0,0,0),d4:al})},t=wl(Kc(n.e5)),{cH:(r=Dl(t),{$:0,a:r}),e7:n.e7}),ek:.1,en:M(e.bk,e.bl),et:l(fl,(function(n){return l(Gr,(function(r){return f(ul,-25.5,e.bs,n,r)}),l(br,1,50))}),l(br,1,50)),eY:!1,e1:rl,d4:al})]))}})((0,{$:0,a:0}))(0)}},e.Elm?function e(n,r){for(var t in r)t in n?"init"==t?b(6):e(n[t],r[t]):n[t]=r[t]}(e.Elm,lo):e.Elm=lo}(e),e.Elm.Main.init({node:document.getElementById("root")});
//# sourceMappingURL=index.3ec5d2ca.js.map
